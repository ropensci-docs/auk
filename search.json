[{"path":[]},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team mes335@cornell.edu. project team review investigate complaints, respond way deems appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://docs.ropensci.org/auk/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"CONTRIBUTING","text":"love collaboration.","code":""},{"path":"https://docs.ropensci.org/auk/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page ","code":""},{"path":"https://docs.ropensci.org/auk/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/auk.git Make sure track progress upstream (.e., version auk CornellLabofOrnithology/auk) git remote add upstream https://github.com/CornellLabofOrnithology/auk.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new branch) alter package functionality (e.g., code , just documentation) please write tests cove new functionality. Push account Submit pull request home base CornellLabofOrnithology/auk","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/auk/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 Matt Strimas-Mackey  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. auk Copyright (C) 2018 Matt Strimas-Mackey This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Introduction to auk","text":"package uses command-line program AWK extract subsets eBird Basic Dataset use R. multi-step process: Define reference eBird data file. Define set spatial, temporal, taxonomic filters. type filter corresponds different function, e.g. auk_species filter species. stage filters set , actual filtering done next step. Filter eBird data text file, producing new text file selected rows. Import text file R data frame. eBird dataset large, step 3 typically takes several hours run. ’s simple example extract Canada Jay records within Canada. familiar pipe operator (%>%), code rewritten:","code":"library(auk) # path to the ebird data file, here a sample included in the package # in practice, provide path to ebd, e.g. input_file <- \"data/ebd_relFeb-2018.txt\" input_file <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # output text file output_file <- \"ebd_filtered_grja.txt\" ebird_data <- input_file %>%    # 1. reference file   auk_ebd() %>%    # 2. define filters   auk_species(species = \"Canada Jay\") %>%    auk_country(country = \"Canada\") %>%    # 3. run filtering   auk_filter(file = output_file) %>%    # 4. read text file into r data frame   read_ebd() input_file <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") output_file <- \"ebd_filtered_grja.txt\" ebd <- auk_ebd(input_file) ebd_filters <- auk_species(ebd, species = \"Canada Jay\") ebd_filters <- auk_country(ebd_filters, country = \"Canada\") ebd_filtered <- auk_filter(ebd_filters, file = output_file) ebd_df <- read_ebd(ebd_filtered)"},{"path":[]},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"the-ebird-basic-dataset","dir":"Articles","previous_headings":"Background","what":"The eBird Basic Dataset","title":"Introduction to auk","text":"eBird database currently contains nearly 500 million bird observations, rate increase accelerating new users join eBird. data extremely valuable tool basic science conservation; however, given sheer amount data, accessing eBird data poses unique challenge. Currently, access complete set eBird observations provided via eBird Basic Dataset (EBD). tab-separated text file, released quarterly, containing validated bird sightings eBird database time release. row corresponds sighting single species within checklist , addition species number individuals reported, information provided checklist level (location, time, date, search effort, etc.). addition, eBird provides Sampling Event Data file contains checklist-level data every valid checklist submitted eBird, including checklists species birds reported. file, row corresponds checklist checklist-level variables included, associated bird data. eBird Basic Dataset provides presence-data, can combined Sampling Event Data file produce presence-absence data. process described . full metadata datasets, consult documentation provided files downloaded.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"auk-vs--rebird","dir":"Articles","previous_headings":"","what":"auk vs. rebird","title":"Introduction to auk","text":"interested eBird data may also want consider rebird, R package provides interface eBird APIs. functions rebird mostly limited accessing recent (.e. within last 30 days) observations, although ebirdfreq() provide historical frequency observation data. contrast, auk gives access full set ~ 500 million eBird observations. ecological applications, users require auk; however, use cases, e.g. building tools birders, rebird provides quick easy way access data.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"data-access","dir":"Articles","previous_headings":"auk vs. rebird","what":"Data access","title":"Introduction to auk","text":"access eBird data, begin creating eBird account signing . visit Download Data page. eBird data access free; however, need request access order obtain access EBD. Filling access request form allows eBird keep track number people using data obtain information applications data used access data, proceed download page. two download options: prepackage download custom download. Downloading prepackaged option gives access full global dataset. choose route, ’ll likely want download EBD (~ 25 GB) corresponding Sampling Event Data (~ 2.5 GB). know ’re likely need data single species, small region, can request custom download prepared consisting subset data. result significantly smaller files; however, note custom requests result huge numbers checklists (e.g. records US) won’t work. either case, download decompress files.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"example-data","dir":"Articles","previous_headings":"auk vs. rebird","what":"Example data","title":"Introduction to auk","text":"package comes two example datasets. first suitable practicing filtering EBD producing presence-data. ’s sample 400 records EBD. contains data North Central America 2010-2012 3 jay species: Canada Jay, Blue Jay, Green Jay. can accessed : second suitable producing zero-filled, presence-absence data. contains every sighting Singapore first half 2012 Collared Kingfisher, White-throated Kingfisher, Blue-eared Kingfisher. full Sampling Event Data file also included, contains checklists Singapore first half 2012. files can accessed : Important note: vignette, system.file() used return path example data included package. using auk practice, provide path location EBD computer, relative path, e.g. \"data/ebd_relFeb-2018.txt\", absolute path, e.g. \"~/ebird/ebd_relFeb-2018/ebd_relFeb-2018.txt\".","code":"library(auk) library(dplyr) system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # ebd system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") # sampling event data system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\")"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"awk","dir":"Articles","previous_headings":"auk vs. rebird","what":"AWK","title":"Introduction to auk","text":"R typically works objects memory , result, hard limit size objects can brought R. eBird contains nearly 500 million sightings, eBird Basic Dataset inherently large file (~150 GB uncompressed) therefore impossible manipulate directly R. Thus generally necessary create subset file outside R, import smaller subset analysis. AWK Unix utility programming language processing column formatted text data. highly flexible extremely fast, making valuable tool pre-processing eBird data order create smaller subset data required. Users data can use AWK produce smaller file, subsetting full text file taxonomically, spatially, temporally, order produce smaller file can loaded R visualization, analysis, modelling. Although AWK powerful tool, three disadvantages: requires learning syntax new language, accessible via command line, results portion workflow existing outside R. package wrapper AWK specifically designed filtering eBird data goal ease use data removing hurdle learning using AWK. Linux Mac users already AWK installed machines, however, Windows uses need install Cygwin gain access AWK. Note Cygwin installed default location (C:/cygwin/bin/gawk.exe C:/cygwin64/bin/gawk.exe) order auk work. check AWK installed can found run auk_getpath(). AWK installed non-standard location, can’t found auk, can manually set path AWK. , set AWK_PATH environment .Renviron file. example, Mac Linux users might add following line: Windows users might add:","code":"AWK_PATH=/usr/bin/awk AWK_PATH=C:/cygwin64/bin/gawk.exe"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"a-note-on-versions","dir":"Articles","previous_headings":"auk vs. rebird","what":"A note on versions","title":"Introduction to auk","text":"package contains current (time package release) version bird taxonomy used eBird. taxonomy determines species can reported eBird therefore species users auk can extract EBD. eBird releases updated taxonomy year, typically August, time auk updated include current taxonomy. using auk, users careful ensure version ’re using sync EBD file ’re working . easily accomplished always using recent version auk recent release eBird Basic Dataset","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"presence-data","dir":"Articles","previous_headings":"","what":"Presence data","title":"Introduction to auk","text":"common use eBird data produce set bird sightings, .e. given species seen. example, type data used produce map sighting locations, determine given bird seen area interest. analytic work, species distribution modeling, presence absence data likely preferred (see Guillera-Arroita et al. 2015). Producing presence-absence data covered next section.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"the-auk_ebd-object","dir":"Articles","previous_headings":"Presence data","what":"The auk_ebd object","title":"Introduction to auk","text":"package uses auk_ebd object keep track input data file, filters defined, output file produced filtering executed. keeping everything wrapped one object, user can keep track exactly set input data filters produced given output data. set initial auk_ebd object, use auk_ebd():","code":"ebd <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    auk_ebd() ebd #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"defining-filters","dir":"Articles","previous_headings":"Presence data","what":"Defining filters","title":"Introduction to auk","text":"auk uses pipeline-based workflow defining filters, can compiled AWK script. following filters can applied: auk_species(): filter species using common scientific names. auk_country(): filter country using standard English names ISO 2-letter country codes. auk_state(): filter state using eBird state codes, see ?ebird_states. auk_bcr(): filter Bird Conservation Region (BCR) using BCR codes, see ?bcr_codes. auk_bbox(): filter spatial bounding box, .e. range latitudes longitudes decimal degrees. auk_date(): filter checklists range dates. extract observations range dates, regardless year, use wildcard “*” place year, e.g. date = c(\"*-05-01\", \"*-06-30\") observations May June year. auk_last_edited(): filter checklists range last edited dates, useful extracting just new recently edited data. auk_protocol(): filter checklists following specific search protocol, either stationary, traveling, casual. auk_project(): filter checklists collected part specific project (e.g. breeding bird survey). auk_time(): filter checklists started range times--day. auk_duration(): filter checklists observation durations within given range. auk_distance(): filter checklists distances travelled within given range. auk_breeding(): retain observations associate breeding bird atlas code. auk_complete(): retain checklists observer specified recorded species seen heard. necessary retain complete records creation presence-absence data, “absence” information inferred lack reporting species checklists. Note functions listed modify auk_ebd object, order define filters. filters defined, filtering actually conducted using auk_filter(). cases, extensive checks performed ensure filters valid. example, species checked official eBird taxonomy countries checked using countrycode package. particularly important filtering time consuming process, catching errors advance can avoid several hours wasted time.","code":"ebd_filters <- ebd %>%    # species: common and scientific names can be mixed   auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%   # country: codes and names can be mixed; case insensitive   auk_country(country = c(\"US\", \"Canada\", \"mexico\")) %>%   # bbox: long and lat in decimal degrees   # formatted as `c(lng_min, lat_min, lng_max, lat_max)`   auk_bbox(bbox = c(-100, 37, -80, 52)) %>%   # date: use standard ISO date format `\"YYYY-MM-DD\"`   auk_date(date = c(\"2012-01-01\", \"2012-12-31\")) %>%   # time: 24h format   auk_time(start_time = c(\"06:00\", \"09:00\")) %>%   # duration: length in minutes of checklists   auk_duration(duration = c(0, 60)) %>%   # complete: all species seen or heard are recorded   auk_complete() ebd_filters #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: Cyanocitta cristata, Perisoreus canadensis #>   Countries: CA, MX, US #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -100 - -80; Lat 37 - 52 #>   Years: all #>   Date: 2012-01-01 - 2012-12-31 #>   Start time: 06:00-09:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: 0-60 minutes #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: yes"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"executing-filters","dir":"Articles","previous_headings":"Presence data","what":"Executing filters","title":"Introduction to auk","text":"functions described Defining filters section defines filter. required filters set, auk_filter() used compile AWK script execute produce output file. , example bringing steps together, following commands extract Canada Jay Blue Jay records Canada save results tab-separated text file subsequent use: Filtering full EBD typically takes least couple hours, set running go grab lunch!","code":"output_file <- \"ebd_filtered_blja-grja.txt\" ebd_jays <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    auk_ebd() %>%    auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%    auk_country(country = \"Canada\") %>%    auk_filter(file = output_file)"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"reading","dir":"Articles","previous_headings":"Presence data","what":"Reading","title":"Introduction to auk","text":"eBird Basic Dataset files can read read_ebd(). wrapper around readr::read_delim(). read_ebd() uses stringsAsFactors = FALSE, quote = \"\", sets column classes, converts variable names snake_case. auk_filter() returns auk_ebd object output file paths stored . auk_ebd object can passed directly auk_read(), allowing complete pipeline. example, can create auk_ebd object, define filters, filter AWK, read results .","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    read_ebd() %>%    glimpse() #> Rows: 398 #> Columns: 48 #> $ checklist_id              <chr> \"G1131664\", \"G1131665\", \"G1158137\", \"G115813… #> $ global_unique_identifier  <chr> \"URN:CornellLabOfOrnithology:EBIRD:OBS294400… #> $ last_edited_date          <chr> \"2021-03-29 21:21:52.583259\", \"2020-02-01 20… #> $ taxonomic_order           <dbl> 20724, 20724, 20674, 20674, 20724, 20724, 20… #> $ category                  <chr> \"species\", \"species\", \"species\", \"species\", … #> $ taxon_concept_id          <chr> \"avibase-361B447A\", \"avibase-361B447A\", \"avi… #> $ common_name               <chr> \"Green Jay\", \"Green Jay\", \"Canada Jay\", \"Can… #> $ scientific_name           <chr> \"Cyanocorax yncas\", \"Cyanocorax yncas\", \"Per… #> $ exotic_code               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ observation_count         <chr> \"2\", \"6\", \"1\", \"1\", \"X\", \"3\", \"4\", \"3\", \"6\",… #> $ breeding_code             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ breeding_category         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ behavior_code             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ age_sex                   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ country                   <chr> \"United States\", \"United States\", \"Canada\", … #> $ country_code              <chr> \"US\", \"US\", \"CA\", \"CA\", \"MX\", \"MX\", \"CA\", \"U… #> $ state                     <chr> \"Texas\", \"Texas\", \"British Columbia\", \"Briti… #> $ state_code                <chr> \"US-TX\", \"US-TX\", \"CA-BC\", \"CA-BC\", \"MX-NLE\"… #> $ county                    <chr> \"Zapata\", \"Starr\", \"Northern Rockies\", \"Nort… #> $ county_code               <chr> \"US-TX-505\", \"US-TX-427\", \"CA-BC-NR\", \"CA-BC… #> $ iba_code                  <chr> NA, NA, NA, NA, \"MX_69\", NA, NA, NA, NA, NA,… #> $ bcr_code                  <int> 36, 36, 6, 6, 48, 36, 13, 10, 36, 48, 48, 8,… #> $ usfws_code                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ atlas_block               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ locality                  <chr> \"Zapata Library / City Park (LTC 085)\", \"Fal… #> $ locality_id               <chr> \"L846015\", \"L128962\", \"L343808\", \"L343808\", … #> $ locality_type             <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\",… #> $ latitude                  <dbl> 26.90220, 26.58361, 58.82617, 58.82617, 25.5… #> $ longitude                 <dbl> -99.27106, -99.14529, -122.90187, -122.90187… #> $ observation_date          <date> 2011-11-14, 2011-11-14, 2011-06-14, 2011-06… #> $ time_observations_started <chr> \"06:45:00\", \"08:15:00\", \"10:30:00\", \"07:00:0… #> $ observer_id               <chr> \"obsr554038\", \"obsr146271\", \"obsr12384\", \"ob… #> $ sampling_event_identifier <chr> \"S21633922\", \"S9118288\", \"S22036612\", \"S2203… #> $ protocol_type             <chr> \"Traveling\", \"Traveling\", \"Stationary\", \"Sta… #> $ protocol_code             <chr> \"P22\", \"P22\", \"P21\", \"P21\", \"P22\", \"P22\", \"P… #> $ project_code              <chr> \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\",… #> $ duration_minutes          <int> 30, 60, 60, 90, 90, 90, 90, 35, 60, 60, 75, … #> $ effort_distance_km        <dbl> 1.609, 3.219, NA, NA, 1.000, 1.500, NA, 3.21… #> $ effort_area_ha            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 4.04… #> $ number_observers          <int> 2, 2, 13, 13, 7, 2, 2, 5, 4, 5, 5, 2, 5, 10,… #> $ all_species_reported      <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… #> $ group_identifier          <chr> \"G1131664\", \"G1131665\", \"G1158137\", \"G115813… #> $ has_media                 <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA… #> $ approved                  <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… #> $ reviewed                  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA… #> $ reason                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trip_comments             <chr> NA, NA, \"BCFO extension trip\", \"BCFO extensi… #> $ species_comments          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … output_file <- \"ebd_filtered_blja-grja.txt\" ebd_df <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    auk_ebd() %>%    auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%    auk_country(country = \"Canada\") %>%    auk_filter(file = output_file) %>%    read_ebd()"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"saving-the-awk-command","dir":"Articles","previous_headings":"Presence data","what":"Saving the AWK command","title":"Introduction to auk","text":"AWK script can saved future reference providing output filename awk_file. addition, setting execute = FALSE AWK script generated run.","code":"awk_script <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    auk_ebd() %>%    auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%    auk_country(country = \"Canada\") %>%    auk_filter(awk_file = \"awk-script.txt\", execute = FALSE) # read back in and prepare for printing awk_file <- readLines(awk_script) unlink(\"awk-script.txt\") awk_file[!grepl(\"^[[:space:]]*$\", awk_file)] %>%    paste0(collapse = \"\\n\") %>%    cat() #> BEGIN { #>   FS = OFS = \"   \" #>     split(\"Cyanocitta cristata   Perisoreus canadensis\", speciesValues, \"    \") #>     for (i in speciesValues) species[speciesValues[i]] = 1 #>     split(\"CA\", countryValues, \" \") #>     for (i in countryValues) countries[countryValues[i]] = 1 #> } #> { #>   keep = 1 #>   # filters #>   if (keep == 1 && ($7 in species)) { #>     keep = 1 #>   } else { #>     keep = 0 #>   } #>   if (keep == 1 && ($17 in countries)) { #>     keep = 1 #>   } else { #>     keep = 0 #>   } #>   # keeps header #>   if (NR == 1) { #>     keep = 1 #>   } #>   if (keep == 1) { #>     print $0 #>   } #> }"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"group-checklists","dir":"Articles","previous_headings":"Presence data","what":"Group checklists","title":"Introduction to auk","text":"eBird allows observers birding together share checklists. process creates new copy original checklist observer original checklist shared; copies can tweaked add remove species weren’t seen entire group, altering sampling-event data. applications, ’s best remove duplicate (near-duplicate) checklists. auk_unique() removes duplicates resulting group checklists selecting observation lowest sampling_event_identifier (unique ID checklist); original checklists shared copies generated. addition removing duplicates, checklist_id field added, equal sampling_event_identifier non-group checklists group_identifier grouped checklists. running auk_unique(), every species single entry checklist_id. read_ebd() automatically runs auk_unique(), however, can use unique = FALSE manually run auk_unique().","code":"# read in an ebd file and don't automatically remove duplicates ebd_dupes <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   read_ebd(unique = FALSE) # remove duplicates ebd_unique <- auk_unique(ebd_dupes) # compare number of rows nrow(ebd_dupes) #> [1] 400 nrow(ebd_unique) #> [1] 398"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"taxonomic-rollup","dir":"Articles","previous_headings":"Presence data","what":"Taxonomic rollup","title":"Introduction to auk","text":"eBird Basic Dataset includes true species taxa, including domestics, hybrids, subspecies, “spuhs”, recognizable forms. cases, checklist may contain multiple records species, example, Audubon’s Myrtle Yellow-rumped Warblers, well records resolvable species, example, “warbler sp.”. use cases, single record species checklist desired. function ebd_rollup() addresses cases removing taxa identifiable species rolling taxa identified species level single record species checklist. default, read_ebd() calls ebd_rollup() importing eBird Basic Dataset file. avoid , retain subspecies, use read_ebd(rollup = FALSE).","code":"# read in sample data without rolling up ebd <- system.file(\"extdata/ebd-rollup-ex.txt\", package = \"auk\") %>%   read_ebd(rollup = FALSE) # apply roll up ebd_ru <- auk_rollup(ebd)  # all taxa not identifiable to species are dropped # taxa below species have been rolled up to species unique(ebd$category) #> [1] \"domestic\"   \"form\"       \"hybrid\"     \"intergrade\" \"slash\"      #> [6] \"spuh\"       \"species\"    \"issf\" unique(ebd_ru$category) #> [1] \"species\"  # yellow-rump warbler subspecies rollup # without rollup, there are three observations ebd %>%   filter(common_name == \"Yellow-rumped Warbler\") %>%   select(checklist_id, category, common_name, subspecies_common_name,          observation_count) #> # A tibble: 4 × 5 #>   checklist_id category   common_name   subspecies_common_name observation_count #>   <chr>        <chr>      <chr>         <chr>                  <chr>             #> 1 S44943108    intergrade Yellow-rumpe… Yellow-rumped Warbler… 1                 #> 2 S129851825   species    Yellow-rumpe… NA                     1                 #> 3 S129851825   issf       Yellow-rumpe… Yellow-rumped Warbler… 1                 #> 4 S129851825   issf       Yellow-rumpe… Yellow-rumped Warbler… 2 # with rollup, they have been combined ebd_ru %>%   filter(common_name == \"Yellow-rumped Warbler\") %>%   select(checklist_id, category, common_name, observation_count) #> # A tibble: 2 × 4 #>   checklist_id category common_name           observation_count #>   <chr>        <chr>    <chr>                 <chr>             #> 1 S129851825   species  Yellow-rumped Warbler 4                 #> 2 S44943108    species  Yellow-rumped Warbler 1"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"zero-filled-presence-absence-data","dir":"Articles","previous_headings":"","what":"Zero-filled, presence-absence data","title":"Introduction to auk","text":"many applications, presence-data sufficient; however, modeling analysis, presence-absence data required. eBird observers explicitly collect presence data, option flagging checklist “complete” meaning reporting species saw heard, identified. Therefore, given list positive sightings (basic dataset) list checklists (sampling event data) possible infer absences filling zeros species explicitly reported. section vignette describes functions producing zero-filled, presence-absence data.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"filtering","dir":"Articles","previous_headings":"Zero-filled, presence-absence data","what":"Filtering","title":"Introduction to auk","text":"preparing create zero-filled data, eBird Basic Dataset sampling event data must filtered set checklists ensure consistency. ensure two datasets synced, provide auk_ebd, filter described previous section. ensure filters applied ebd (except species) applied sampling event data ’ll working set checklists. critical auk_compete() called, since complete checklists requirement zero-filling. example, following filters include sightings Collared Kingfisher 6 10am: presence-data, call auk_filter() actually run AWK. Output files must provided EBD sampling event data.","code":"# to produce zero-filled data, provide an EBD and sampling event data file f_ebd <- system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") f_smp <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") filters <- auk_ebd(f_ebd, file_sampling = f_smp) %>%    auk_species(\"Collared Kingfisher\") %>%    auk_time(c(\"06:00\", \"10:00\")) %>%    auk_complete() filters #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_ebd.txt  #>   Sampling events: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_sampling.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: Todiramphus chloris #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: 06:00-10:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: yes ## ebd_sed_filtered <- auk_filter(filters,  ##                                file = \"ebd-filtered.txt\", ##                                file_sampling = \"sampling-filtered.txt\") ebd_sed_filtered #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_ebd.txt  #>   Sampling events: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_sampling.txt  #>  #> Output  #>   EBD: ebd-filtered.txt  #>   Sampling events: sampling-filtered.txt  #>  #> Filters  #>   Species: Todiramphus chloris #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: 06:00-10:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: yes"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"reading-and-zero-filling","dir":"Articles","previous_headings":"Zero-filled, presence-absence data","what":"Reading and zero-filling","title":"Introduction to auk","text":"filtered datasets can now combined zero-filled, presence-absence dataset using auk_zerofill(). Filenames data frames basic dataset sampling event data can also passed auk_zerofill(); see documentation cases. default, auk_zerofill() returns auk_zerofill object consisting two data frames can linked common checklist_id field: ebd_zf$sampling_events contains checklist information ebd_zf$observations contains species counts binary presence-absence variable format efficient storage checklist information isn’t duplicated, however, single flat data frame often required analysis. collapse two data frames together use collapse_zerofill(), call auk_zerofill() collapse = TRUE.","code":"## ebd_zf <- auk_zerofill(ebd_sed_filtered) ebd_zf #> Zero-filled EBD: 131 unique checklists, for 1 species. head(ebd_zf$observations) #> # A tibble: 6 × 8 #>   checklist_id scientific_name     breeding_code breeding_category behavior_code #>   <chr>        <chr>               <chr>         <chr>             <chr>         #> 1 G2470228     Todiramphus chloris NA            NA                NA            #> 2 G366411      Todiramphus chloris NA            NA                NA            #> 3 S10006552    Todiramphus chloris NA            NA                NA            #> 4 S10006731    Todiramphus chloris NA            NA                NA            #> 5 S10006786    Todiramphus chloris NA            NA                NA            #> 6 S10011787    Todiramphus chloris NA            NA                NA            #> # ℹ 3 more variables: age_sex <chr>, observation_count <chr>, #> #   species_observed <lgl> glimpse(ebd_zf$sampling_events) #> Rows: 131 #> Columns: 31 #> $ checklist_id              <chr> \"S9843037\", \"S34396450\", \"S9589770\", \"S16642… #> $ last_edited_date          <chr> \"2022-01-13 07:47:42.702684\", \"2022-01-13 07… #> $ country                   <chr> \"Singapore\", \"Singapore\", \"Singapore\", \"Sing… #> $ country_code              <chr> \"SG\", \"SG\", \"SG\", \"SG\", \"SG\", \"SG\", \"SG\", \"S… #> $ state                     <chr> \"Singapore\", \"Singapore\", \"Singapore\", \"Sing… #> $ state_code                <chr> \"SG-\", \"SG-\", \"SG-\", \"SG-\", \"SG-\", \"SG-\", \"S… #> $ county                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ county_code               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ iba_code                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ bcr_code                  <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ usfws_code                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ atlas_block               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ locality                  <chr> \"Pulau Ubin\", \"Pulau Ubin\", \"Pulau Ubin\", \"P… #> $ locality_id               <chr> \"L1055540\", \"L1055540\", \"L1055540\", \"L105554… #> $ locality_type             <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\",… #> $ latitude                  <dbl> 1.403608, 1.403608, 1.403608, 1.403608, 1.35… #> $ longitude                 <dbl> 103.9688, 103.9688, 103.9688, 103.9688, 103.… #> $ observation_date          <date> 2012-02-16, 2012-06-23, 2012-01-15, 2012-01… #> $ time_observations_started <chr> \"08:00:00\", \"09:00:00\", \"08:00:00\", \"08:00:0… #> $ observer_id               <chr> \"obs204697\", \"obs816783\", \"obs205759\", \"obs4… #> $ sampling_event_identifier <chr> \"S9843037\", \"S34396450\", \"S9589770\", \"S16642… #> $ protocol_type             <chr> \"Traveling\", \"Traveling\", \"Traveling\", \"Trav… #> $ protocol_code             <chr> \"P22\", \"P22\", \"P22\", \"P22\", \"P21\", \"P22\", \"P… #> $ project_code              <chr> \"EBIRD\", \"EBIRD\", \"EBIRD_CAN\", \"EBIRD_AU\", \"… #> $ duration_minutes          <int> 300, 180, 300, 510, 23, 195, 150, 105, 190, … #> $ effort_distance_km        <dbl> 1.609, 4.000, 3.000, 10.000, NA, 3.000, 3.00… #> $ effort_area_ha            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ number_observers          <int> 2, 2, 6, 1, 2, 3, 12, 3, 1, 1, 3, 3, 2, 1, 1… #> $ all_species_reported      <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… #> $ group_identifier          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trip_comments             <chr> \"With Ailin Chuah on day trip\", NA, NA, \"Spe… ## ebd_zf_df <- auk_zerofill(ebd_filtered, collapse = TRUE) ebd_zf_df <- collapse_zerofill(ebd_zf) class(ebd_zf_df) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" ebd_zf_df #> # A tibble: 131 × 38 #>    checklist_id last_edited_date    country country_code state state_code county #>    <chr>        <chr>               <chr>   <chr>        <chr> <chr>      <chr>  #>  1 S9843037     2022-01-13 07:47:4… Singap… SG           Sing… SG-        NA     #>  2 S34396450    2022-01-13 07:47:4… Singap… SG           Sing… SG-        NA     #>  3 S9589770     2023-01-31 19:39:0… Singap… SG           Sing… SG-        NA     #>  4 S16642917    2023-01-31 19:39:0… Singap… SG           Sing… SG-        NA     #>  5 S10410041    2013-10-14 16:08:30 Singap… SG           Sing… SG-        NA     #>  6 S10366236    2021-04-02 03:48:3… Singap… SG           Sing… SG-        NA     #>  7 S34396153    2021-08-03 11:08:2… Singap… SG           Sing… SG-        NA     #>  8 S9760550     2022-03-12 04:34:1… Singap… SG           Sing… SG-        NA     #>  9 S16899954    2022-03-02 06:47:0… Singap… SG           Sing… SG-        NA     #> 10 S10920563    2019-08-10 00:41:22 Singap… SG           Sing… SG-        NA     #> # ℹ 121 more rows #> # ℹ 31 more variables: county_code <chr>, iba_code <chr>, bcr_code <int>, #> #   usfws_code <chr>, atlas_block <chr>, locality <chr>, locality_id <chr>, #> #   locality_type <chr>, latitude <dbl>, longitude <dbl>, #> #   observation_date <date>, time_observations_started <chr>, #> #   observer_id <chr>, sampling_event_identifier <chr>, protocol_type <chr>, #> #   protocol_code <chr>, project_code <chr>, duration_minutes <int>, …"},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Introduction to auk","text":"package based AWK scripts provided presentation given Wesley Hochachka, Daniel Fink, Tom Auer, Frank La Sorte 2016 NAOC eBird Data Workshop August 15, 2016. auk benefited significantly rOpenSci review process, including helpful suggestions Auriel Fournier Edmund Hart.","code":""},{"path":"https://docs.ropensci.org/auk/articles/auk.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to auk","text":"","code":"eBird Basic Dataset. Version: ebd_relFeb-2018. Cornell Lab of Ornithology, Ithaca, New York. May 2013.  Guillera-Arroita, G., J.J. Lahoz-Monfort, J. Elith, A. Gordon, H. Kujala, P.E. Lentini, M.A. McCarthy, R. Tingley, and B.A. Wintle. 2015. Is my species distribution model fit for purpose? Matching data and models to applications. Global Ecology and Biogeography 24:276-292."},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"updating-the-ebird-taxonomy","dir":"Articles","previous_headings":"","what":"Updating the eBird taxonomy","title":"auk development","text":"species, taxa, available entry eBird database dependent eBird taxonomy. Every August, eBird team updates taxonomy reflect name changes splits, merges, new species, changes. Historical eBird records updated accordingly subsequent EBD files reflect updated taxonomy. auk package stores copy taxonomy data frame ebird_taxonomy, uses filtering species (auk_species()) taxonomic roll-(auk_rollup()). Therefore, auk must updated new eBird taxonomy released. section described done. best new taxonomy new EBD released, otherwise taxonomy EBD sync. eBird taxonomy updated, new version can downloaded eBird website. taxonomy can downloaded csv Excel format, sure download Excel file csv file character encoding issues. Copy file data-raw/. point, check new taxonomy format previous file, also directory. Ensure columns present ’re named . file data-raw/ebird-taxonomy.r prepares taxonomy data frame stored package. Open file edit read_xlsx() call point new file just downloaded. Run code, open ebird_taxonomy data frame inspect make sure ’s glaring issues. One potential error investigated non-ASCII characters. common names accented characters (e.g. Rüppell’s Griffon, Gyps rueppelli), can cause problems. ebird-taxonomy.r converts characters unaccented equivalents (e.g. Ruppell’s Griffon). Check record, others accented characters, properly converted. Next, update auk_version_date() (R/auk-version-date.r) reflect date new taxonomy new EBD. Finally, build package (devtools::build()) run R CMD check (devtools::check()). everything looks good, commit git push GitHub.","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"adding-new-filters","dir":"Articles","previous_headings":"","what":"Adding new filters","title":"auk development","text":"primary functionality auk apply filters EBD extract subset records can imported R analyzed. Individual filters defined particular function (e.g. auk_date() auk_country()) correspond subsetting particular column (e.g. “OBSERVATION DATE” “COUNTRY CODE”, respectively). Defining new filter fairly complicated process, involving carefully updating many components package, attempted experienced R programmers. add filter called color, following steps required: Update auk_ebd() (file R/auk-ebd.r) define column number new filter, create placeholder auk_ebd object store filtering criteria, update auk_ebd print method new filter. Create new function auk_color() (file R/auk-color.r) defines new filter. starting point, use one filtering functions. example filter range numeric values, start auk_duration(), filter logical (true/false) variable use auk_complete(), filter discrete, categorical variable use auk_country(). sure apply extensive checking validity inputs update documentation, including examples. Update auk_filter() (file R/auk-filter.r) incorporate filtering criteria AWK script. , use existing filter template. Create unit tests new filter creating new test_that() block tests/testthat/test_filters.r. , use existing filter template. Update README.md vignettes/auk.Rmd add new filter list potential filters. Build, test, check, push GitHub","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"update-auk_ebd","dir":"Articles","previous_headings":"Adding new filters","what":"1. Update auk_ebd()","title":"auk development","text":"Near top code auk_ebd(), data frame named filter_cols defined specifies columns associated filters. Add new row data frame set name name column file header filtered id name filter. example, ’re creating filter called auk_color() filters column “FEATHER COLOR”, set id = \"color\" name = \"feather color\". Ideally, similar filters grouped together data frame, insert new row accordingly. filters don’t apply sampling event data file, .e. filters species level rather checklist level, add id character vector not_in_sampling. example, modify code read: not_in_sampling <- c(\"species\", \"breeding\", \"color\"). Next, end code auk_ebd(), auk_ebd object created returned statement beginning structure(.... object placeholders every filter. , add new element list, naming variable id data frame, putting order data frame, choosing sensible data type. example, color categorical variable, add new list element color = character(), ’s numeric variable, add color = numeric(). Finally, within auk-ebd.r print.auk_ebd() method defined, ’ll need update print filter sensible way. ’re best find another filter similar format use template. , sure put print code filter right order. example, categorical filter allow multiple potential values, may way something like:","code":"# color filter cat(\"  Feather color: \") if (length(x$filters$color) == 0) {   cat(\"all\") } else {   cat(paste(x$filters$color, collapse = \", \")) } cat(\"\\n\")"},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"create-filter-function","dir":"Articles","previous_headings":"Adding new filters","what":"2. Create filter function","title":"auk development","text":"Create new function allow users define filter. sure following naming conventions used, color example, function named auk_color() file called auk-color.r. ’s easiest use existing function template . general, function take two argument, auk_ebd object modify, argument filter criteria, e.g. auk_color(x, color). Note name function matches name second argument. function edited include following: Extensive checks incoming arguments. Remember filtering AWK takes multiple hours, ’s best catch errors early, prior running auk_filter(). least, check data types , possible, check values valid (e.g. color c(\"red\", \"green\", \"blue\", ...)). Provide informative error warning messages appropriate. Setting filter criteria auk_ebd object. generally simple x$filters$color = color. Thorough documentation. Document arguments provide examples without pipe operator (%>%).","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"update-auk_filter","dir":"Articles","previous_headings":"Adding new filters","what":"3. Update auk_filter()","title":"auk development","text":"actual work filtering done auk_filter(), generates AWK script, calls AWK. function must updated parse filters defined using function created step 2 AWK code. code auk_filter(), two calls internal function awk_translate(), internal function defined file. ’s awk_translate() ’ll need edit. function series code blocks prepares AWK code different filter. Find existing filter similar new one ’re creating copy correct spot (remember preserve ordering filters). auk_color() example, code chunk look like: given sampling event data file addition EBD file, auk_filter() filter files. default auk_filter() apply filters files, however, filters (e.g. species) appropriate EBD. address , prior calling auk_translate() sampling data, reset species-specific filters. case color, species specific variable, modify code follows: Finally, end auk-filter.r file, ’s string named awk_filter, defines template AWK script. filter line string (e.g. ${species}) AWK code inserted. ’ll need add line file new filter: ${color}.","code":"# color filter   if (length(filters$color) == 0) {     filter_strings$color <- \"\"   } else {     idx <- col_idx$index[col_idx$id == \"color\"]     condition <- paste0(\"$\", idx, \" == \\\"\", filters$color, \"\\\"\",                         collapse = \" || \")     filter_strings$color <- str_interp(awk_if, list(condition = condition))   } s_filters <- x$filters s_filters$species <- character() ## ADD THIS LINE s_filters$color <- character() ## awk_script_sampling <- awk_translate(filters = s_filters,                                      col_idx = x$col_idx_sampling,                                      sep = sep,                                      select = select_cols)"},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"unit-tests","dir":"Articles","previous_headings":"Adding new filters","what":"4. Unit tests","title":"auk development","text":"Now ’ve successfully created filter, play around bit make sure works expected. feel filter working, ’s time formalize testing process defining unit tests. Open file tests/testthat/test_filters.r ’ll notice series calls like test_that(\"auk_species\", ..., contains tests specific filter. Using existing test block example, define new block (, put correct order relative filters). Consult Testing chapter Hadley Wickham’s R packages book details defining good unit tests. least, define tests make sure typical use works expected, errors caught input invalid, edge cases correctly handled.","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"update-vignette-and-readme","dir":"Articles","previous_headings":"Adding new filters","what":"5. Update vignette and README","title":"auk development","text":"vignette (vignettes/auk.Rmd) README (README.Rmd) sections giving short description filter. Add new filter ’ve created .","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"build-test-check-and-push-to-github","dir":"Articles","previous_headings":"Adding new filters","what":"6. Build, test, check, and push to GitHub","title":"auk development","text":"Carry following final steps: Run devtools::document() generate package documentation Run devtools::build() build install package Run devtools::check() run units tests variety checks via R CMD check Build vignettes devtools::build_vignettes() Build package website pkgdown::build_site() Commit git, push GitHub","code":""},{"path":"https://docs.ropensci.org/auk/articles/development.html","id":"cran-submission","dir":"Articles","previous_headings":"","what":"CRAN submission","title":"auk development","text":"Minor updates auk can pushed GitHub giving users option installing development version . However, least year, new eBird taxonomy released, new version auk released CRAN. full details process, consult Hadley Wickham’s R Packages book, however, ’ll provide quick guide . package updated following instructions sections: Check package. Run devtools::check() run R CMD check locally. Check Windows binary can built running devtools::build_win(). results emailed within 30 minutes. Also, package uses continuous integration automatically check package Linux, Mac, Windows whenever ’s pushed GitHub. Check badges top GitHub repo ensure builds passing. NOTEs, ERRORs, WARNINGs returned R CMD check must fixed submission CRAN. Increment version number DESCRIPTION file. Update NEWS.md note new features changes. Build package devtools::build(), vignettes devtools::build_vignettes(), website pkgdown::build_site(). Commit git push GitHub. Submit CRAN devtools::release() point, ’ll need wait binaries package build, take couple days. ’s possible problems arise process package rejected, case, ’ll need fix problems resubmit. package CRAN, create new release GitHub tag version number.","code":""},{"path":"https://docs.ropensci.org/auk/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Strimas-Mackey. Author, maintainer. Eliot Miller. Author. Wesley Hochachka. Author. Cornell Lab Ornithology. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/auk/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Strimas-Mackey, Eliot Miller, Wesley Hochachka (2023). auk: eBird Data Extraction Processing AWK. R package version 0.7.0. https://cornelllabofornithology.github.io/auk/","code":"@Manual{,   title = {auk: eBird Data Extraction and Processing with AWK},   author = {Matthew Strimas-Mackey and Eliot Miller and Wesley Hochachka},   year = {2023},   note = {R package version 0.7.0},   url = {https://cornelllabofornithology.github.io/auk/}, }"},{"path":[]},{"path":"https://docs.ropensci.org/auk/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"eBird Data Extraction and Processing in R","text":"eBird online tool recording bird observations. Since inception, 600 million records bird sightings (.e. combinations location, date, time, bird species) collected, making eBird one largest citizen science projects history extremely valuable resource bird research conservation. full eBird database packaged text file available download eBird Basic Dataset (EBD). Due large size dataset, must filtered smaller subset desired observations reading R. filtering efficiently done using AWK, Unix utility programming language processing column formatted text data. package acts front end AWK, allowing users filter eBird data import R. comprehensive resource using eBird data modeling species distributions, consult free online book Best Practices Using eBird Data association paper Analytical guidelines increase value community science data: example using eBird data estimate species distributions (Johnston et al. 2021).","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"eBird Data Extraction and Processing in R","text":"auk requires Unix utility AWK, available Linux Mac OS X machines. Windows users first need install Cygwin using package. Note Cygwin must installed default location (C:/cygwin/bin/gawk.exe C:/cygwin64/bin/gawk.exe) order auk work.","code":"# cran release install.packages(\"auk\")  # or install the development version from github # install.packages(\"remotes\") remotes::install_github(\"CornellLabofOrnithology/auk\")"},{"path":"https://docs.ropensci.org/auk/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"eBird Data Extraction and Processing in R","text":"Full details using auk produce presence-presence-absence data outlined vignette.","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"cheatsheet","dir":"","previous_headings":"","what":"Cheatsheet","title":"eBird Data Extraction and Processing in R","text":"auk cheatsheet developed Mickayla Johnston:","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"auk-and-rebird","dir":"","previous_headings":"","what":"auk and rebird","title":"eBird Data Extraction and Processing in R","text":"interested eBird data may also want consider rebird, R package provides interface eBird APIs. functions rebird mostly limited accessing recent (.e. within last 30 days) observations, although ebirdfreq() provide historical frequency observation data. contrast, auk gives access full set ~ 500 million eBird observations. ecological applications, users require auk; however, use cases, e.g. building tools birders, rebird provides quick easy way access data.","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"a-note-on-versions","dir":"","previous_headings":"","what":"A note on versions","title":"eBird Data Extraction and Processing in R","text":"package contains current (time package release) version bird taxonomy used eBird. taxonomy determines species can reported eBird therefore species users auk can extract. eBird releases updated taxonomy year, typically August, time auk updated include current taxonomy. using auk, users careful ensure version ’re using sync eBird Basic Dataset ’re working . easily accomplished always using must recent version auk recent release dataset.","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"eBird Data Extraction and Processing in R","text":"package uses command-line program AWK extract subsets eBird Basic Dataset use R. multi-step process: Define reference eBird data file. Define set spatial, temporal, taxonomic filters. type filter corresponds different function, e.g. auk_species filter species. stage filters set , actual filtering done next step. Filter eBird data text file, producing new text file selected rows. Import text file R data frame. eBird dataset large, step 3 typically takes several hours run. ’s simple example extract Canada Jay records within Canada. familiar pipe operator (%>%), code rewritten:","code":"library(auk) # path to the ebird data file, here a sample included in the package # get the path to the example data included in the package # in practice, provide path to ebd, e.g. f_in <- \"data/ebd_relFeb-2018.txt f_in <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # output text file f_out <- \"ebd_filtered_grja.txt\" ebird_data <- f_in %>%    # 1. reference file   auk_ebd() %>%    # 2. define filters   auk_species(species = \"Canada Jay\") %>%    auk_country(country = \"Canada\") %>%    # 3. run filtering   auk_filter(file = f_out) %>%    # 4. read text file into r data frame   read_ebd() f_in <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") f_out <- \"ebd_filtered_grja.txt\" ebd <- auk_ebd(f_in) ebd_filters <- auk_species(ebd, species = \"Canada Jay\") ebd_filters <- auk_country(ebd_filters, country = \"Canada\") ebd_filtered <- auk_filter(ebd_filters, file = f_out) ebd_df <- read_ebd(ebd_filtered)"},{"path":[]},{"path":"https://docs.ropensci.org/auk/index.html","id":"filtering","dir":"","previous_headings":"Usage","what":"Filtering","title":"eBird Data Extraction and Processing in R","text":"auk uses pipeline-based workflow defining filters, can compiled AWK script. Users start defining reference dataset file auk_ebd(). following filters can applied: auk_species(): filter species using common scientific names. auk_country(): filter country using standard English names ISO 2-letter country codes. auk_state(): filter state using eBird state codes, see ?ebird_states. auk_bcr(): filter Bird Conservation Region (BCR) using BCR codes, see ?bcr_codes. auk_bbox(): filter spatial bounding box, .e. range latitudes longitudes decimal degrees. auk_date(): filter checklists range dates. extract observations range dates, regardless year, use wildcard “*” place year, e.g. date = c(\"*-05-01\", \"*-06-30\") observations May June year. auk_last_edited(): filter checklists range last edited dates, useful extracting just new recently edited data. auk_protocol(): filter checklists following specific search protocol, either stationary, traveling, casual. auk_project(): filter checklists collected part specific project (e.g. breeding bird survey). auk_time(): filter checklists started range times--day. auk_duration(): filter checklists observation durations within given range. auk_distance(): filter checklists distances travelled within given range. auk_breeding(): retain observations associate breeding bird atlas code. auk_complete(): retain checklists observer specified recorded species seen heard. necessary retain complete records creation presence-absence data, “absence”” information inferred lack reporting species checklists. Note functions listed modify auk_ebd object, order define filters. filters defined, filtering actually conducted using auk_filter(). cases, extensive checks performed ensure filters valid. example, species checked official eBird taxonomy countries checked using countrycode package. functions described Defining filters section defines filter. required filters set, auk_filter() used compile AWK script execute produce output file. , example bringing steps together, following commands extract Canada Jay Blue Jay records Canada save results tab-separated text file subsequent use: Filtering full dataset typically takes least couple hours, set running go grab lunch!","code":"# sample data f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # define an EBD reference and a set of filters ebd <- auk_ebd(f) %>%    # species: common and scientific names can be mixed   auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%   # country: codes and names can be mixed; case insensitive   auk_country(country = c(\"US\", \"Canada\", \"mexico\")) %>%   # bbox: long and lat in decimal degrees   # formatted as `c(lng_min, lat_min, lng_max, lat_max)`   auk_bbox(bbox = c(-100, 37, -80, 52)) %>%   # date: use standard ISO date format `\"YYYY-MM-DD\"`   auk_date(date = c(\"2012-01-01\", \"2012-12-31\")) %>%   # time: 24h format   auk_time(start_time = c(\"06:00\", \"09:00\")) %>%   # duration: length in minutes of checklists   auk_duration(duration = c(0, 60)) %>%   # complete: all species seen or heard are recorded   auk_complete() ebd #> Input  #>   EBD: /Users/mes335/projects/auk/inst/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: Cyanocitta cristata, Perisoreus canadensis #>   Countries: CA, MX, US #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -100 - -80; Lat 37 - 52 #>   Years: all #>   Date: 2012-01-01 - 2012-12-31 #>   Start time: 06:00-09:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: 0-60 minutes #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: yes output_file <- \"ebd_filtered_blja-grja.txt\" ebd_filtered <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    auk_ebd() %>%    auk_species(species = c(\"Canada Jay\", \"Cyanocitta cristata\")) %>%    auk_country(country = \"Canada\") %>%    auk_filter(file = output_file)"},{"path":"https://docs.ropensci.org/auk/index.html","id":"reading","dir":"","previous_headings":"Usage","what":"Reading","title":"eBird Data Extraction and Processing in R","text":"eBird Basic Dataset files can read read_ebd():","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%    read_ebd() %>%    str() #> tibble [398 × 48] (S3: tbl_df/tbl/data.frame) #>  $ checklist_id             : chr [1:398] \"G1131664\" \"G1131665\" \"G1158137\" \"G1158138\" ... #>  $ global_unique_identifier : chr [1:398] \"URN:CornellLabOfOrnithology:EBIRD:OBS294400626\" \"URN:CornellLabOfOrnithology:EBIRD:OBS130231497\" \"URN:CornellLabOfOrnithology:EBIRD:OBS299129479\" \"URN:CornellLabOfOrnithology:EBIRD:OBS299130486\" ... #>  $ last_edited_date         : chr [1:398] \"2021-03-29 21:21:52.583259\" \"2020-02-01 20:30:42\" \"2018-08-03 18:05:21\" \"2015-02-23 20:14:13\" ... #>  $ taxonomic_order          : num [1:398] 20724 20724 20674 20674 20724 ... #>  $ category                 : chr [1:398] \"species\" \"species\" \"species\" \"species\" ... #>  $ taxon_concept_id         : chr [1:398] \"avibase-361B447A\" \"avibase-361B447A\" \"avibase-69A6E32F\" \"avibase-69A6E32F\" ... #>  $ common_name              : chr [1:398] \"Green Jay\" \"Green Jay\" \"Canada Jay\" \"Canada Jay\" ... #>  $ scientific_name          : chr [1:398] \"Cyanocorax yncas\" \"Cyanocorax yncas\" \"Perisoreus canadensis\" \"Perisoreus canadensis\" ... #>  $ exotic_code              : chr [1:398] NA NA NA NA ... #>  $ observation_count        : chr [1:398] \"2\" \"6\" \"1\" \"1\" ... #>  $ breeding_code            : chr [1:398] NA NA NA NA ... #>  $ breeding_category        : chr [1:398] NA NA NA NA ... #>  $ behavior_code            : chr [1:398] NA NA NA NA ... #>  $ age_sex                  : chr [1:398] NA NA NA NA ... #>  $ country                  : chr [1:398] \"United States\" \"United States\" \"Canada\" \"Canada\" ... #>  $ country_code             : chr [1:398] \"US\" \"US\" \"CA\" \"CA\" ... #>  $ state                    : chr [1:398] \"Texas\" \"Texas\" \"British Columbia\" \"British Columbia\" ... #>  $ state_code               : chr [1:398] \"US-TX\" \"US-TX\" \"CA-BC\" \"CA-BC\" ... #>  $ county                   : chr [1:398] \"Zapata\" \"Starr\" \"Northern Rockies\" \"Northern Rockies\" ... #>  $ county_code              : chr [1:398] \"US-TX-505\" \"US-TX-427\" \"CA-BC-NR\" \"CA-BC-NR\" ... #>  $ iba_code                 : chr [1:398] NA NA NA NA ... #>  $ bcr_code                 : int [1:398] 36 36 6 6 48 36 13 10 36 48 ... #>  $ usfws_code               : chr [1:398] NA NA NA NA ... #>  $ atlas_block              : chr [1:398] NA NA NA NA ... #>  $ locality                 : chr [1:398] \"Zapata Library / City Park (LTC 085)\" \"Falcon State Park (LTC 084)\" \"Parker Lake\" \"Parker Lake\" ... #>  $ locality_id              : chr [1:398] \"L846015\" \"L128962\" \"L343808\" \"L343808\" ... #>  $ locality_type            : chr [1:398] \"H\" \"H\" \"H\" \"H\" ... #>  $ latitude                 : num [1:398] 26.9 26.6 58.8 58.8 25.5 ... #>  $ longitude                : num [1:398] -99.3 -99.1 -122.9 -122.9 -100.3 ... #>  $ observation_date         : Date[1:398], format: \"2011-11-14\" \"2011-11-14\" \"2011-06-14\" \"2011-06-15\" ... #>  $ time_observations_started: chr [1:398] \"06:45:00\" \"08:15:00\" \"10:30:00\" \"07:00:00\" ... #>  $ observer_id              : chr [1:398] \"obsr554038\" \"obsr146271\" \"obsr12384\" \"obsr12384\" ... #>  $ sampling_event_identifier: chr [1:398] \"S21633922\" \"S9118288\" \"S22036612\" \"S22036670\" ... #>  $ protocol_type            : chr [1:398] \"Traveling\" \"Traveling\" \"Stationary\" \"Stationary\" ... #>  $ protocol_code            : chr [1:398] \"P22\" \"P22\" \"P21\" \"P21\" ... #>  $ project_code             : chr [1:398] \"EBIRD\" \"EBIRD\" \"EBIRD\" \"EBIRD\" ... #>  $ duration_minutes         : int [1:398] 30 60 60 90 90 90 90 35 60 60 ... #>  $ effort_distance_km       : num [1:398] 1.61 3.22 NA NA 1 ... #>  $ effort_area_ha           : num [1:398] NA NA NA NA NA NA NA NA NA NA ... #>  $ number_observers         : int [1:398] 2 2 13 13 7 2 2 5 4 5 ... #>  $ all_species_reported     : logi [1:398] TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ group_identifier         : chr [1:398] \"G1131664\" \"G1131665\" \"G1158137\" \"G1158138\" ... #>  $ has_media                : logi [1:398] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ approved                 : logi [1:398] TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ reviewed                 : logi [1:398] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ reason                   : chr [1:398] NA NA NA NA ... #>  $ trip_comments            : chr [1:398] NA NA \"BCFO extension trip\" \"BCFO extension trip\" ... #>  $ species_comments         : chr [1:398] NA NA NA NA ... #>  - attr(*, \"rollup\")= logi TRUE"},{"path":"https://docs.ropensci.org/auk/index.html","id":"presence-absence-data","dir":"","previous_headings":"","what":"Presence-absence data","title":"eBird Data Extraction and Processing in R","text":"many applications, presence-data sufficient; however, modeling analysis, presence-absence data required. auk includes functionality produce presence-absence data eBird checklists. full details, consult vignette: vignette(\"auk\").","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"eBird Data Extraction and Processing in R","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"eBird Data Extraction and Processing in R","text":"package based AWK scripts provided part eBird Data Workshop given Wesley Hochachka, Daniel Fink, Tom Auer, Frank La Sorte 2016 NAOC August 15, 2016. auk benefited significantly rOpenSci review process, including helpful suggestions Auriel Fournier Edmund Hart.","code":""},{"path":"https://docs.ropensci.org/auk/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"eBird Data Extraction and Processing in R","text":"","code":"eBird Basic Dataset. Version: ebd_relFeb-2018. Cornell Lab of Ornithology, Ithaca, New York. May 2013."},{"path":"https://docs.ropensci.org/auk/reference/auk-package.html","id":null,"dir":"Reference","previous_headings":"","what":"auk: eBird Data Extraction and Processing in R — auk-package","title":"auk: eBird Data Extraction and Processing in R — auk-package","text":"Tools extracting processing eBird data eBird Basic Dataset (EBD).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"auk: eBird Data Extraction and Processing in R — auk-package","text":"Maintainer: Matthew Strimas-Mackey mes335@cornell.edu (ORCID) Authors: Eliot Miller Wesley Hochachka contributors: Cornell Lab Ornithology [copyright holder]","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by spatial bounding box — auk_bbox","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"Define filter eBird Basic Dataset (EBD) based spatial bounding box. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"","code":"auk_bbox(x, bbox)"},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). bbox numeric sf Raster* object; spatial bounding box expressed range latitudes longitudes decimal degrees: c(lng_min, lat_min, lng_max, lat_max). Note longitudes Western Hemisphere latitudes sound equator given negative numbers. Alternatively, spatial object either sf raster packages can provided bounding box extracted object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by spatial bounding box — auk_bbox","text":"","code":"# fliter to locations roughly in the Pacific Northwest system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_bbox(bbox = c(-125, 37, -120, 52)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -125 - -120; Lat 37 - 52 #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_bbox(ebd, bbox = c(-125, 37, -120, 52)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -125 - -120; Lat 37 - 52 #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by Bird Conservation Region — auk_bcr","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"Define filter eBird Basic Dataset (EBD) extract data set Bird Conservation Regions (BCRs). BCRs ecologically distinct regions North America similar bird communities, habitats, resource management issues. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"","code":"auk_bcr(x, bcr, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). bcr integer; BCRs filter . BCRs identified integer, 1 66, can looked bcr_codes table. replace logical; multiple calls auk_bcr() additive, unless replace = FALSE, case previous list states filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_bcr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by Bird Conservation Region — auk_bcr","text":"","code":"# bcr codes can be looked up in bcr_codes dplyr::filter(bcr_codes, bcr_name == \"Central Hardwoods\") #> # A tibble: 1 × 2 #>   bcr_code bcr_name          #>      <int> <chr>             #> 1       24 Central Hardwoods system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_bcr(bcr = 24) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: 24 #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # filter to bcr 24 ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_bcr(ebd, bcr = 24) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: 24 #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_breeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter to only include observations with breeding codes — auk_breeding","title":"Filter to only include observations with breeding codes — auk_breeding","text":"eBird users option specifying breeding bird atlas codes observations, example, nesting building behaviour observed. Use filter select observations associated breeding code. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_breeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter to only include observations with breeding codes — auk_breeding","text":"","code":"auk_breeding(x)"},{"path":"https://docs.ropensci.org/auk/reference/auk_breeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter to only include observations with breeding codes — auk_breeding","text":"x auk_ebd object; reference basic dataset file created auk_ebd().","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_breeding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter to only include observations with breeding codes — auk_breeding","text":"auk_ebd object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_breeding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter to only include observations with breeding codes — auk_breeding","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_breeding() #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: yes #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean an eBird data file (Deprecated) — auk_clean","title":"Clean an eBird data file (Deprecated) — auk_clean","text":"function longer required current versions eBird Basic Dataset (EBD).","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean an eBird data file (Deprecated) — auk_clean","text":"","code":"auk_clean(f_in, f_out, sep = \"\\t\", remove_text = FALSE, overwrite = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean an eBird data file (Deprecated) — auk_clean","text":"f_in character; input file. file found specified, looked directory specified EBD_PATH environment variable. f_out character; output file. sep character; input field separator, basic dataset tab separated default. Must single character space delimited allowed since spaces appear many fields. remove_text logical; whether free text entry columns removed. columns include comments, location names, observer names. columns cause import errors due special characters increase file size, yet rarely valuable analytical applications, may removed. Setting argument TRUE can lead significant reduction file size. overwrite logical; overwrite output file already exists.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean an eBird data file (Deprecated) — auk_clean","text":"AWK ran without errors, output filename returned, however, error encountered exit code returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean an eBird data file (Deprecated) — auk_clean","text":"","code":"if (FALSE) { # get the path to the example data included in the package f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # output to a temp file for example # in practice, provide path to output file # e.g. f_out <- \"output/ebd_clean.txt\" f_out <- tempfile()  # clean file to remove problem rows # note: this function is deprecated and no longer does anything auk_clean(f, f_out) }"},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out incomplete checklists from the eBird data — auk_complete","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"Define filter eBird Basic Dataset (EBD) keep complete checklists, .e. birds seen heard recorded. checklists valuable scientific uses since provide presence absence data.function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"","code":"auk_complete(x)"},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling().","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out incomplete checklists from the eBird data — auk_complete","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_complete() #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: yes"},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by country — auk_country","title":"Filter the eBird data by country — auk_country","text":"Define filter eBird Basic Dataset (EBD) based set countries. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by country — auk_country","text":"","code":"auk_country(x, country, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by country — auk_country","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). country character; countries filter . Countries can either expressed English names ISO 2-letter country codes. English names matched via regular expressions using countrycode, flexibility names. replace logical; multiple calls auk_country() additive, unless replace = FALSE, case previous list countries filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by country — auk_country","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by country — auk_country","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_country.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by country — auk_country","text":"","code":"# country names and ISO2 codes can be mixed # not case sensitive country <- c(\"CA\", \"United States\", \"mexico\") system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_country(country) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: CA, MX, US #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_country(ebd, country) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: CA, MX, US #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by county — auk_county","title":"Filter the eBird data by county — auk_county","text":"Define filter eBird Basic Dataset (EBD) based set counties function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by county — auk_county","text":"","code":"auk_county(x, county, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by county — auk_county","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). county character; counties filter . eBird uses county codes consisting three parts, 2-letter ISO country code, 1-3 character state code, county code, separated dash. example, \"US-NY-109\" corresponds Tompkins, NY, US. easiest way find county code find corresponding explore region page look URL. replace logical; multiple calls auk_county() additive, unless replace = FALSE, case previous list states filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by county — auk_county","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by county — auk_county","text":"possible filter county well country state, calling auk_county() reset filters countries states, vice versa. function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_county.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by county — auk_county","text":"","code":"# choose tompkins county, ny, united states system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_county(\"US-NY-109\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: US-NY-109 #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_county(ebd, \"US-NY-109\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: US-NY-109 #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by date — auk_date","title":"Filter the eBird data by date — auk_date","text":"Define filter eBird Basic Dataset (EBD) based range dates. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by date — auk_date","text":"","code":"auk_date(x, date)"},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by date — auk_date","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). date character date; date range filter , provided either character vector format \"2015-12-31\" vector Date objects. filter range dates, regardless year, use \"*\" place year.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by date — auk_date","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by date — auk_date","text":"select observations range dates, regardless year,  wildcard \"*\" can used place year. example, using date = c(\"*-05-01\", \"*-06-30\") return observations May June year. using wildcards, dates can wrap around year end. function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by date — auk_date","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_date(date = c(\"2010-01-01\", \"2010-12-31\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: 2010-01-01 - 2010-12-31 #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_date(ebd, date = c(\"2010-01-01\", \"2010-12-31\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: 2010-01-01 - 2010-12-31 #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no  # the * wildcard can be used in place of year to select dates from all years system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   # may-june records from all years   auk_date(date = c(\"*-05-01\", \"*-06-30\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: *-05-01 - *-06-30 #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # dates can also wrap around the end of the year system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   # dec-jan records from all years   auk_date(date = c(\"*-12-01\", \"*-01-31\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: *-12-01 - *-01-31 #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter eBird data by distance travelled — auk_distance","title":"Filter eBird data by distance travelled — auk_distance","text":"Define filter eBird Basic Dataset (EBD) based distance travelled checklist. function defines filter , filters defined, auk_filter() used call AWK perform filtering. Note stationary checklists (.e. point counts) distance associated , however, since checklists can assumed 0 distance kept 0 range defined distance.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter eBird data by distance travelled — auk_distance","text":"","code":"auk_distance(x, distance, distance_units)"},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter eBird data by distance travelled — auk_distance","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). distance integer; 2 element vector specifying range distances filter . default accept distances kilometers, use distance_units = \"miles\" miles. distance_units character; whether distances provided kilometers (default) miles.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter eBird data by distance travelled — auk_distance","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter eBird data by distance travelled — auk_distance","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter eBird data by distance travelled — auk_distance","text":"","code":"# only keep checklists that are less than 10 km long system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_distance(distance = c(0, 10)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: 0-10 km #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_distance(ebd, distance = c(0, 10)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: 0-10 km #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by duration — auk_duration","title":"Filter the eBird data by duration — auk_duration","text":"Define filter eBird Basic Dataset (EBD) based duration checklist. function defines filter , filters defined, auk_filter() used call AWK perform filtering. Note checklists effort, incidental observations, excluded filter used since associated duration information.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by duration — auk_duration","text":"","code":"auk_duration(x, duration)"},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by duration — auk_duration","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). duration integer; 2 element vector specifying range durations minutes filter .","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by duration — auk_duration","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by duration — auk_duration","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by duration — auk_duration","text":"","code":"# only keep checklists that are less than an hour long system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_duration(duration = c(0, 60)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: 0-60 minutes #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_duration(ebd, duration = c(0, 60)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: 0-60 minutes #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference to eBird data file — auk_ebd","title":"Reference to eBird data file — auk_ebd","text":"Create reference eBird Basic Dataset (EBD) file preparation filtering using AWK.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference to eBird data file — auk_ebd","text":"","code":"auk_ebd(file, file_sampling, sep = \"\\t\")"},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference to eBird data file — auk_ebd","text":"file character; input file. file found specified, looked directory specified EBD_PATH environment variable. file_sampling character; optional input sampling event data (.e. checklists) file, required intend zero-fill data produce presence-absence data set. file consists just effort information every eBird checklist. species appearing EBD given checklist implicitly considered count 0. file downloaded time basic dataset ensure sync. file found specified, looked directory specified EBD_PATH environment variable. sep character; input field separator, eBird data tab separated generally modified. Must single character space delimited allowed since spaces appear many fields.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference to eBird data file — auk_ebd","text":"auk_ebd object storing file reference desired filters created package functions.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference to eBird data file — auk_ebd","text":"eBird data can downloaded tab-separated text file eBird website submitting request access. February 2017, file nearly 150 GB making challenging work . interested single species small region possible submit custom download request. approach suggested speed processing time. two potential pathways preparing eBird data. Users wishing produce presence data, download eBird Basic Dataset reference file calling auk_ebd(). Users wishing produce zero-filled, presence absence data additionally download sampling event data file associated basic dataset file contains checklist information can used infer absences. sampling event data file provided auk_ebd() via file_sampling argument. details consult vignettes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference to eBird data file — auk_ebd","text":"","code":"# get the path to the example data included in the package # in practice, provide path to ebd, e.g. f <- \"data/ebd_relFeb-2018.txt f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") auk_ebd(f) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no # to produce zero-filled data, provide a checklist file f_ebd <- system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") f_cl <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") auk_ebd(f_ebd, file_sampling = f_cl) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_ebd.txt  #>   Sampling events: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_sampling.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the EBD version and associated taxonomy version — auk_ebd_version","title":"Get the EBD version and associated taxonomy version — auk_ebd_version","text":"Based filename eBird Basic Dataset (EBD) sampling event data, determine version (.e. release date) EBD. Also determine corresponding taxonomy version. eBird taxonomy updated annually August.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the EBD version and associated taxonomy version — auk_ebd_version","text":"","code":"auk_ebd_version(x, check_exists = TRUE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the EBD version and associated taxonomy version — auk_ebd_version","text":"x filename EBD sampling event data file, auk_ebd object, auk_sampling object. check_exists logical; file checked existence processing. check_exists = TRUE file exists, function raise error.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the EBD version and associated taxonomy version — auk_ebd_version","text":"list two elements: ebd_version: date object specifying release date EBD. taxonomy_version: year taxonomy used EBD. elements NA EBD version extracted filename.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_ebd_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the EBD version and associated taxonomy version — auk_ebd_version","text":"","code":"auk_ebd_version(\"ebd_relAug-2018.txt\", check_exists = FALSE) #> $ebd_version #> [1] \"2018-08-01\" #>  #> $taxonomy_version #> [1] 2018 #>"},{"path":"https://docs.ropensci.org/auk/reference/auk_exotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by exotic code — auk_exotic","title":"Filter the eBird data by exotic code — auk_exotic","text":"Exotic codes applied eBird observations species believe non-native given location. function defines filter eBird Basic Dataset (EBD) subset observations one exotic codes: \"\" (.e. code, meaning native species), \"N\" (naturalized), \"P\" (provisional), \"X\" (escapee). function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_exotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by exotic code — auk_exotic","text":"","code":"auk_exotic(x, exotic_code, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_exotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by exotic code — auk_exotic","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). exotic_code characterr; exotic codes filter . Note empty string (\"\"), meaning exotic code, used native species. replace logical; multiple calls auk_exotic() additive, unless replace = FALSE, case previous list states filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_exotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by exotic code — auk_exotic","text":"auk_ebd object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_exotic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by exotic code — auk_exotic","text":"","code":"# filter to only native observations ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_exotic(ebd, exotic_code = \"\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: Native #>   Complete checklists only: no  # filter to native and naturalized observations auk_exotic(ebd, exotic_code = c(\"\", \"N\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: Native, Naturalized #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by spatial extent — auk_extent","title":"Filter the eBird data by spatial extent — auk_extent","text":"Deprecated, use auk_bbox() instead.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by spatial extent — auk_extent","text":"","code":"auk_extent(x, extent)"},{"path":"https://docs.ropensci.org/auk/reference/auk_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by spatial extent — auk_extent","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). extent numeric; spatial extent expressed range latitudes longitudes decimal degrees: c(lng_min, lat_min, lng_max, lat_max). Note longitudes Western Hemisphere latitudes sound equator given negative numbers.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by spatial extent — auk_extent","text":"auk_ebd object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by spatial extent — auk_extent","text":"","code":"# fliter to locations roughly in the Pacific Northwest system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_bbox(bbox = c(-125, 37, -120, 52)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -125 - -120; Lat 37 - 52 #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_bbox(ebd, bbox = c(-125, 37, -120, 52)) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: Lon -125 - -120; Lat 37 - 52 #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird file using AWK — auk_filter","title":"Filter the eBird file using AWK — auk_filter","text":"Convert filters defined auk_ebd object AWK script run script produce filtered eBird Reference Dataset (ERD). initial creation auk_ebd object done auk_ebd() filters can defined using various functions package, e.g. auk_species() auk_country(). Note function typically takes least couple hours run full dataset","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird file using AWK — auk_filter","text":"","code":"auk_filter(x, file, ...)  # S3 method for auk_ebd auk_filter(   x,   file,   file_sampling,   keep,   drop,   awk_file,   sep = \"\\t\",   filter_sampling = TRUE,   execute = TRUE,   overwrite = FALSE,   ... )  # S3 method for auk_sampling auk_filter(   x,   file,   keep,   drop,   awk_file,   sep = \"\\t\",   execute = TRUE,   overwrite = FALSE,   ... )"},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird file using AWK — auk_filter","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). file character; output file. ... arguments passed methods. file_sampling character; optional output file sampling data. keep character; character vector specifying names columns keep output file. Columns appear header EBD; however, names case sensitive spaces may replaced underscores, e.g. \"COMMON NAME\", \"common name\", \"common_NAME\" valid. drop character; character vector columns drop format keep. Ignored keep supplied. awk_file character; output file optionally save awk script . sep character; input field separator, eBird file tab separated default. Must single character space delimited allowed since spaces appear many fields. filter_sampling logical; whether sampling event data also filtered. execute logical; whether execute awk script, output file manual execution. flag FALSE, awk_file must provided. overwrite logical; overwrite output file already exists","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird file using AWK — auk_filter","text":"auk_ebd object output files set. execute = FALSE, path AWK script returned instead.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird file using AWK — auk_filter","text":"sampling file provided auk_ebd object, function filter eBird Basic Dataset sampling data using set filters. ensures files sync, .e. contain data set checklists. AWK script can saved future reference providing output filename awk_file. default behavior function generate run AWK script, however, setting execute = FALSE AWK script generated run. case, file ignored awk_file must specified. Calling function requires command line utility AWK installed. Linux Mac machines AWK default, Windows users likely need install Cygwin.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Filter the eBird file using AWK — auk_filter","text":"auk_filter(auk_ebd): auk_ebd object auk_filter(auk_sampling): auk_sampling object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird file using AWK — auk_filter","text":"","code":"# get the path to the example data included in the package # in practice, provide path to ebd, e.g. f <- \"data/ebd_relFeb-2018.txt\" f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # define filters filters <- auk_ebd(f) %>%   auk_species(species = c(\"Canada Jay\", \"Blue Jay\")) %>%   auk_country(country = c(\"US\", \"Canada\")) %>%   auk_bbox(bbox = c(-100, 37, -80, 52)) %>%   auk_date(date = c(\"2012-01-01\", \"2012-12-31\")) %>%   auk_time(start_time = c(\"06:00\", \"09:00\")) %>%   auk_duration(duration = c(0, 60)) %>%   auk_complete()    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) filters <- auk_species(ebd, species = c(\"Canada Jay\", \"Blue Jay\")) filters <- auk_country(filters, country = c(\"US\", \"Canada\")) filters <- auk_bbox(filters, bbox = c(-100, 37, -80, 52)) filters <- auk_date(filters, date = c(\"2012-01-01\", \"2012-12-31\")) filters <- auk_time(filters, start_time = c(\"06:00\", \"09:00\")) filters <- auk_duration(filters, duration = c(0, 60)) filters <- auk_complete(filters)  # apply filters if (FALSE) { # output to a temp file for example # in practice, provide path to output file # e.g. f_out <- \"output/ebd_filtered.txt\" f_out <- tempfile() filtered <- auk_filter(filters, file = f_out) str(read_ebd(filtered)) }"},{"path":"https://docs.ropensci.org/auk/reference/auk_get_awk_path.html","id":null,"dir":"Reference","previous_headings":"","what":"OS specific path to AWK executable — auk_get_awk_path","title":"OS specific path to AWK executable — auk_get_awk_path","text":"Return OS specific path AWK (e.g. \"C:/cygwin64/bin/gawk.exe\" \"/usr/bin/awk\"), highlights installed. manually set path AWK, set AWK_PATH environment variable .Renviron file, can accomplished helper function auk_set_awk_path(path).","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_get_awk_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OS specific path to AWK executable — auk_get_awk_path","text":"","code":"auk_get_awk_path()"},{"path":"https://docs.ropensci.org/auk/reference/auk_get_awk_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OS specific path to AWK executable — auk_get_awk_path","text":"Path AWK NA AWK found.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_get_awk_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OS specific path to AWK executable — auk_get_awk_path","text":"","code":"auk_get_awk_path() #> [1] \"/usr/bin/awk\""},{"path":"https://docs.ropensci.org/auk/reference/auk_get_ebd_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Return EBD data path — auk_get_ebd_path","title":"Return EBD data path — auk_get_ebd_path","text":"Returns environment variable EBD_PATH, users encouraged set directory stores eBird Basic Dataset (EBD) text files.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_get_ebd_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return EBD data path — auk_get_ebd_path","text":"","code":"auk_get_ebd_path()"},{"path":"https://docs.ropensci.org/auk/reference/auk_get_ebd_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return EBD data path — auk_get_ebd_path","text":"path stored EBD_PATH environment variable.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_get_ebd_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return EBD data path — auk_get_ebd_path","text":"","code":"auk_get_ebd_path() #> [1] NA"},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by last edited date — auk_last_edited","title":"Filter the eBird data by last edited date — auk_last_edited","text":"Define filter eBird Basic Dataset (EBD) based range last edited dates. Last edited date typically used extract just new recently edited data. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by last edited date — auk_last_edited","text":"","code":"auk_last_edited(x, date)"},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by last edited date — auk_last_edited","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). date character date; date range filter , provided either character vector format \"2015-12-31\" vector Date objects.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by last edited date — auk_last_edited","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by last edited date — auk_last_edited","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_last_edited.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by last edited date — auk_last_edited","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_last_edited(date = c(\"2010-01-01\", \"2010-12-31\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: 2010-01-01 - 2010-12-31 #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by observer — auk_observer","title":"Filter the eBird data by observer — auk_observer","text":"Define filter eBird Basic Dataset (EBD) based set observer IDs function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by observer — auk_observer","text":"","code":"auk_observer(x, observer_id)"},{"path":"https://docs.ropensci.org/auk/reference/auk_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by observer — auk_observer","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). observer_id character integer; observers filter . Observer IDs can provided either integer (e.g. 12345) character \"obsr\" prefix appear EBD (e.g. \"obsr12345\").","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_observer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by observer — auk_observer","text":"auk_ebd `auk_sampling`` object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_observer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by observer — auk_observer","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_observer(\"obsr313215\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_observer(ebd, observer = 313215) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by project code — auk_project","title":"Filter the eBird data by project code — auk_project","text":"eBird records collected part particular project (e.g. Virginia Breeding Bird Survey) associated project code eBird dataset (e.g. EBIRD_ATL_VA). function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by project code — auk_project","text":"","code":"auk_project(x, project)"},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by project code — auk_project","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). project character; project code filter (e.g. \"EBIRD_MEX\"). Multiple codes accepted.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by project code — auk_project","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by project code — auk_project","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by project code — auk_project","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_project(\"EBIRD_MEX\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: EBIRD_MEX #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_project(ebd, \"EBIRD_MEX\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: EBIRD_MEX #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by protocol — auk_protocol","title":"Filter the eBird data by protocol — auk_protocol","text":"Filter just data collected following specific search protocol: stationary, traveling, casual. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by protocol — auk_protocol","text":"","code":"auk_protocol(x, protocol)"},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by protocol — auk_protocol","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). protocol character. Many protocols exist database, however, commonly used : Stationary Traveling Area Incidental complete list valid protocols contained within vector valid_protocols within package. Multiple protocols allowed time.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by protocol — auk_protocol","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by protocol — auk_protocol","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by protocol — auk_protocol","text":"","code":"system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_protocol(\"Stationary\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: Stationary #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_protocol(ebd, \"Stationary\") #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: Stationary #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Roll up eBird taxonomy to species — auk_rollup","title":"Roll up eBird taxonomy to species — auk_rollup","text":"eBird Basic Dataset (EBD) includes true species every field-identifiable taxon relevant birders report. includes taxa identifiable species (e.g. hybrids) taxa reported species level (e.g. subspecies). function produces list observations true species, removing former rolling latter species level. resulting EBD data.frame, category \"species\" records subspecies fields dropped. default, read_ebd() calls ebd_rollup() importing eBird data file.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Roll up eBird taxonomy to species — auk_rollup","text":"","code":"auk_rollup(x, taxonomy_version, drop_higher = TRUE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Roll up eBird taxonomy to species — auk_rollup","text":"x data.frame; data frame eBird data, typically imported read_ebd() taxonomy_version integer; version (.e. year) taxonomy. cases, left empty use version taxonomy included package. See get_ebird_taxonomy(). drop_higher logical; whether remove taxa species rollup process, e.g. \"spuhs\" like \"duck sp.\".","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Roll up eBird taxonomy to species — auk_rollup","text":"data frame eBird data taxonomic rollup applied.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Roll up eBird taxonomy to species — auk_rollup","text":"rolling observations species level observed counts summed across taxa resolve species. However, taxa count \"X\" (.e. observer enter count), rolled record get \"X\" well. example, observer saw 3 Myrtle 2 Audubon's Warblers, roll 5 Yellow-rumped Warblers. However, \"X\" entered Myrtle, roll \"X\" Yellow-rumped Warbler. eBird taxonomy groups taxa eight different categories. categories, way treated auk_rollup() follows: Species: e.g., Mallard. Combined lower level taxa present checklist. ISSF Identifiable Sub-specific Group: Identifiable subspecies group subspecies, e.g., Mallard (Mexican). Rolled-species level. Intergrade: Hybrid two ISSF (subspecies subspecies groups), e.g., Mallard (Mexican intergrade. Rolled-species level. Form: Miscellaneous taxa, including recently-described species yet accepted distinctive forms universally accepted (Red-tailed Hawk (Northern), Upland Goose (Bar-breasted)). checklist contains multiple taxa corresponding species, lower level taxa rolled , otherwise records left . Spuh:  Genus identification broad level -- e.g., duck sp., dabbling duck sp.. Dropped auk_rollup(). Slash: Identification Species-pair e.g., American Black Duck/Mallard). Dropped auk_rollup(). Hybrid: Hybrid two species, e.g., American Black Duck x Mallard (hybrid). Dropped auk_rollup(). Domestic: Distinctly-plumaged domesticated varieties may free-flying (count personal lists) e.g., Mallard (Domestic type). Dropped auk_rollup(). rollup process based eBird taxonomy, updated year August. auk package includes copy eBird taxonomy, current time release; however, EBD auk versions aligned, may need explicitly specify version taxonomy use, case eBird API queried get correct version taxonomy.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Roll up eBird taxonomy to species — auk_rollup","text":"Consult eBird taxonomy page details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_rollup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Roll up eBird taxonomy to species — auk_rollup","text":"","code":"# get the path to the example data included in the package # in practice, provide path to ebd, e.g. f <- \"data/ebd_relFeb-2018.txt f <- system.file(\"extdata/ebd-rollup-ex.txt\", package = \"auk\") # read in data without rolling up ebd <- read_ebd(f, rollup = FALSE) # rollup ebd_ru <- auk_rollup(ebd) # keep higher taxa ebd_higher <- auk_rollup(ebd, drop_higher = FALSE)  # all taxa not identifiable to species are dropped unique(ebd$category) #> [1] \"domestic\"   \"form\"       \"hybrid\"     \"intergrade\" \"slash\"      #> [6] \"spuh\"       \"species\"    \"issf\"       unique(ebd_ru$category) #> [1] \"species\" unique(ebd_higher$category) #> [1] \"species\" \"slash\"   \"spuh\"    \"hybrid\"   # yellow-rump warbler subspecies rollup library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # without rollup, there are three observations ebd %>%   filter(common_name == \"Yellow-rumped Warbler\") %>%    select(checklist_id, category, common_name, subspecies_common_name,           observation_count) #> # A tibble: 4 × 5 #>   checklist_id category   common_name   subspecies_common_name observation_count #>   <chr>        <chr>      <chr>         <chr>                  <chr>             #> 1 S44943108    intergrade Yellow-rumpe… Yellow-rumped Warbler… 1                 #> 2 S129851825   species    Yellow-rumpe… NA                     1                 #> 3 S129851825   issf       Yellow-rumpe… Yellow-rumped Warbler… 1                 #> 4 S129851825   issf       Yellow-rumpe… Yellow-rumped Warbler… 2                 # with rollup, they have been combined ebd_ru %>%   filter(common_name == \"Yellow-rumped Warbler\") %>%    select(checklist_id, category, common_name, observation_count) #> # A tibble: 2 × 4 #>   checklist_id category common_name           observation_count #>   <chr>        <chr>    <chr>                 <chr>             #> 1 S129851825   species  Yellow-rumped Warbler 4                 #> 2 S44943108    species  Yellow-rumped Warbler 1"},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference to eBird sampling event file — auk_sampling","title":"Reference to eBird sampling event file — auk_sampling","text":"Create reference eBird sampling event file preparation filtering using AWK. working sightings data use auk_ebd(), use auk_sampling() intend work checklist-level data.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference to eBird sampling event file — auk_sampling","text":"","code":"auk_sampling(file, sep = \"\\t\")"},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference to eBird sampling event file — auk_sampling","text":"file character; input sampling event data file, contains checklist data eBird. sep character; input field separator, eBird data tab separated generally modified. Must single character space delimited allowed since spaces appear many fields.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference to eBird sampling event file — auk_sampling","text":"auk_sampling object storing file reference desired filters created package functions.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference to eBird sampling event file — auk_sampling","text":"eBird data can downloaded tab-separated text file eBird website submitting request access. eBird Basic Dataset (EBD) row corresponds observation single bird species single checklist, sampling event data file contains single row every checklist. function creates R object reference sampling data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference to eBird sampling event file — auk_sampling","text":"","code":"# get the path to the example data included in the package # in practice, provide path to the sampling event data # e.g. f <- \"data/ebd_sampling_relFeb-2018.txt\" f <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") auk_sampling(f) #> Input  #>   Sampling events: /usr/local/lib/R/site-library/auk/extdata/zerofill-ex_sampling.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Countries: all #>   States: all #>   Counties: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a subset of columns — auk_select","title":"Select a subset of columns — auk_select","text":"Select subset columns eBird Basic Dataset (EBD) sampling events file. Subsetting columns can significantly decrease file size.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a subset of columns — auk_select","text":"","code":"auk_select(x, select, file, sep = \"\\t\", overwrite = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a subset of columns — auk_select","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). select character; character vector specifying names columns select. Columns appear header EBD; however, names case sensitive spaces may replaced underscores, e.g. \"COMMON NAME\", \"common name\", \"common_NAME\" valid. file character; output file. sep character; input field separator, eBird file tab separated default. Must single character space delimited allowed since spaces appear many fields. overwrite logical; overwrite output file already exists","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a subset of columns — auk_select","text":"Invisibly returns filename output file.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a subset of columns — auk_select","text":"","code":"if (FALSE) { # select a minimal set of columns out_file <- tempfile() ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) cols <- c(\"latitude\", \"longitude\",           \"group identifier\", \"sampling event identifier\",            \"scientific name\", \"observation count\",           \"observer_id\") selected <- auk_select(ebd, select = cols, file = out_file) str(read_ebd(selected)) }"},{"path":"https://docs.ropensci.org/auk/reference/auk_set_awk_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a custom path to AWK executable — auk_set_awk_path","title":"Set a custom path to AWK executable — auk_set_awk_path","text":"AWK installed non-standard location, environment variable AWK_PATH must set specify location executable. Use function set AWK_PATH .Renviron file. users set AWK_PATH, installed AWK non-standard location auk find . function first looks .Renviron location defined R_ENVIRON_USER, defaults ~/.Renviron.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_set_awk_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a custom path to AWK executable — auk_set_awk_path","text":"","code":"auk_set_awk_path(path, overwrite = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_set_awk_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a custom path to AWK executable — auk_set_awk_path","text":"path character; path AWK executable system, e.g. \"C:/cygwin64/bin/gawk.exe\" \"/usr/bin/awk\". overwrite logical; existing AWK_PATH overwritten already set .Renviron.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_set_awk_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a custom path to AWK executable — auk_set_awk_path","text":"Edits .Renviron, sets AWK_PATH current session, returns EBD path invisibly.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_set_awk_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a custom path to AWK executable — auk_set_awk_path","text":"","code":"if (FALSE) { auk_set_awk_path(\"/usr/bin/awk\") }"},{"path":"https://docs.ropensci.org/auk/reference/auk_set_ebd_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the path to EBD text files — auk_set_ebd_path","title":"Set the path to EBD text files — auk_set_ebd_path","text":"Users auk encouraged set path directory containing eBird Basic Dataset (EBD) text files EBD_PATH environment variable. functions referencing EBD sampling event data files check directory find files, thus avoiding need specify full path every time. increase portability code. Use function set EBD_PATH .Renviron file; also possible manually edit file. function first looks .Renviron location defined R_ENVIRON_USER, defaults ~/.Renviron.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_set_ebd_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the path to EBD text files — auk_set_ebd_path","text":"","code":"auk_set_ebd_path(path, overwrite = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_set_ebd_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the path to EBD text files — auk_set_ebd_path","text":"path character; directory EBD text files stored, e.g. \"/home/matt/ebd\". overwrite logical; existing EBD_PATH overwritten already set .Renviron.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_set_ebd_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the path to EBD text files — auk_set_ebd_path","text":"Edits .Renviron, sets EBD_PATH current session, returns EBD path invisibly.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_set_ebd_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the path to EBD text files — auk_set_ebd_path","text":"","code":"if (FALSE) { auk_set_ebd_path(\"/home/matt/ebd\") }"},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by species — auk_species","title":"Filter the eBird data by species — auk_species","text":"Define filter eBird Basic Dataset (EBD) based species. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by species — auk_species","text":"","code":"auk_species(x, species, taxonomy_version, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by species — auk_species","text":"x auk_ebd object; reference object created auk_ebd(). species character; species filter , provided scientific English common names, mixture . names must match official eBird Taxomony (ebird_taxonomy). taxonomy_version integer; version (.e. year) taxonomy. cases, left empty use version taxonomy included package. See get_ebird_taxonomy(). replace logical; multiple calls auk_species() additive, unless replace = FALSE, case previous list species filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by species — auk_species","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by species — auk_species","text":"list species checked eBird taxonomy validity. taxonomy updated year August. auk package includes copy eBird taxonomy, current time release; however, EBD auk versions aligned, may need explicitly specify version taxonomy use, case eBird API queried get correct version taxonomy.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by species — auk_species","text":"","code":"# common and scientific names can be mixed species <- c(\"Canada Jay\", \"Pluvialis squatarola\") system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_species(species) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: Perisoreus canadensis, Pluvialis squatarola #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_species(ebd, species) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: Perisoreus canadensis, Pluvialis squatarola #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an eBird data file by species — auk_split","title":"Split an eBird data file by species — auk_split","text":"Given eBird Basic Dataset (EBD) list species, split file multiple text files, one species. function typically used auk_filter() applied resulting file large read .","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an eBird data file by species — auk_split","text":"","code":"auk_split(   file,   species,   prefix,   taxonomy_version,   sep = \"\\t\",   overwrite = FALSE )"},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an eBird data file by species — auk_split","text":"file character; input file. species character; species filter split , provided scientific English common names, mixture . names must match official eBird Taxomony (ebird_taxonomy). prefix character; file directory prefix. example, splitting species \"\" \"B\" prefix = \"data/ebd_\", resulting files \"data/ebd_A.txt\" \"data/ebd_B.txt\". taxonomy_version integer; version (.e. year) taxonomy. cases, left empty use version taxonomy included package. See get_ebird_taxonomy(). sep character; input field separator, eBird file tab separated default. Must single character space delimited allowed since spaces appear many fields. overwrite logical; overwrite output files already exists.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an eBird data file by species — auk_split","text":"vector output filenames, one species.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split an eBird data file by species — auk_split","text":"list species checked eBird taxonomy validity. taxonomy updated year August. auk package includes copy eBird taxonomy, current time release; however, EBD auk versions aligned, may need explicitly specify version taxonomy use, case eBird API queried get correct version taxonomy.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an eBird data file by species — auk_split","text":"","code":"if (FALSE) { species <- c(\"Canada Jay\", \"Cyanocitta stelleri\") # get the path to the example data included in the package # in practice, provide path to a filtered ebd file # e.g. f <- \"data/ebd_filtered.txt f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") # output to a temporary directory for example # in practice, provide the path to the output location # e.g. prefix <- \"output/ebd_\" prefix <- file.path(tempdir(), \"ebd_\") species_files <- auk_split(f, species = species, prefix = prefix) }"},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by state — auk_state","title":"Filter the eBird data by state — auk_state","text":"Define filter eBird Basic Dataset (EBD) based set states. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by state — auk_state","text":"","code":"auk_state(x, state, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by state — auk_state","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). state character; states filter . eBird uses 4 6 character state codes consisting two parts, 2-letter ISO country code 1-3 character state code, separated dash. example, \"US-NY\" corresponds New York State United States. Refer data frame ebird_states look state codes. replace logical; multiple calls auk_state() additive, unless replace = FALSE, case previous list states filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by state — auk_state","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by state — auk_state","text":"possible filter country state, calling auk_state() reset country filter countries, vice versa. function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by state — auk_state","text":"","code":"# state codes for a given country can be looked up in ebird_states dplyr::filter(ebird_states, country == \"Costa Rica\") #> # A tibble: 7 × 4 #>   country    country_code state           state_code #>   <chr>      <chr>        <chr>           <chr>      #> 1 Costa Rica CR           \"Alajuela\"      CR-A       #> 2 Costa Rica CR           \"Cartago\"       CR-C       #> 3 Costa Rica CR           \"Guanacaste\"    CR-G       #> 4 Costa Rica CR           \"Heredia\"       CR-H       #> 5 Costa Rica CR           \"Lim\\u001an\"    CR-L       #> 6 Costa Rica CR           \"Puntarenas\"    CR-P       #> 7 Costa Rica CR           \"San Jos\\u001a\" CR-SJ      # choose texas, united states and puntarenas, cost rica states <- c(\"US-TX\", \"CR-P\") system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_state(states) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: CR-P, US-TX #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_state(ebd, states) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: CR-P, US-TX #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data by checklist start time — auk_time","title":"Filter the eBird data by checklist start time — auk_time","text":"Define filter eBird Basic Dataset (EBD) based range start times checklist. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data by checklist start time — auk_time","text":"","code":"auk_time(x, start_time)"},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data by checklist start time — auk_time","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). start_time character; 2 element character vector giving range times 24 hour format, e.g. \"06:30\" \"16:22\".","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data by checklist start time — auk_time","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data by checklist start time — auk_time","text":"function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data by checklist start time — auk_time","text":"","code":"# only keep checklists started between 6 and 8 in the morning system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_time(start_time = c(\"06:00\", \"08:00\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: 06:00-08:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_time(ebd, start_time = c(\"06:00\", \"08:00\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: all #>   Date: all #>   Start time: 06:00-08:00 #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate group checklists — auk_unique","title":"Remove duplicate group checklists — auk_unique","text":"eBird checklists can shared among group multiple observers, case observations duplicated database. functions removes duplicates eBird Basic Dataset (EBD) EBD sampling event data (checklists_only = TRUE), creating set unique bird observations. function called automatically read_ebd() read_sampling().","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicate group checklists — auk_unique","text":"","code":"auk_unique(   x,   group_id = \"group_identifier\",   checklist_id = \"sampling_event_identifier\",   species_id = \"scientific_name\",   observer_id = \"observer_id\",   checklists_only = FALSE )"},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate group checklists — auk_unique","text":"x data.frame; EBD data frame, typically imported read_ebd(). group_id character; name group ID column. checklist_id character; name checklist ID column, checklist within group get unique value field. record lowest checklist_id picked unique record within group. output dataset, field updated full list checklist IDs went group checklist. species_id character; name column identifying species uniquely. required ensure removing duplicates done independently species. Note treat sub-species independently , behavior desired, user generate column uniquely identifying species subspecies pass column's name argument. observer_id character; name column identifying owner instance group checklist. output dataset, full list observer IDs stored (comma separated) new observer_id field. order IDs match order comma separated checklist IDs. checklists_only logical; whether dataset provided contains checklist information sampling event data file. argument TRUE, species_id argument ignored removing duplicated records done checklist level species level.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate group checklists — auk_unique","text":"data frame unique observations, additional field, checklist_id, combination sampling event group IDs.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove duplicate group checklists — auk_unique","text":"function chooses checklist within lowest value field specified checklist_id. new column also created, checklist_id, whose value taken field specified checklist_id parameter non-group checklists field specified group_id parameter grouped checklists. checklist observer IDs checklists comprise given group checklist retained comma separated string ordered checklist ID.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicate group checklists — auk_unique","text":"","code":"# read in an ebd file and don't automatically remove duplicates f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") ebd <- read_ebd(f, unique = FALSE) # remove duplicates ebd_unique <- auk_unique(ebd) nrow(ebd) #> [1] 400 nrow(ebd_unique) #> [1] 398"},{"path":"https://docs.ropensci.org/auk/reference/auk_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Versions of auk, the EBD, and the eBird taxonomy — auk_version","title":"Versions of auk, the EBD, and the eBird taxonomy — auk_version","text":"package depends version EBD eBird taxonomy. Use function determine currently installed version auk, version EBD auk version works , version eBird taxonomy included packages. EBD update quarterly, March, June, September, December, taxonomy updated annually August September. ensure proper functioning, always use latest version auk package EBD.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Versions of auk, the EBD, and the eBird taxonomy — auk_version","text":"","code":"auk_version()"},{"path":"https://docs.ropensci.org/auk/reference/auk_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Versions of auk, the EBD, and the eBird taxonomy — auk_version","text":"list three elements: auk_version: version auk, e.g. \"auk 0.4.1\". ebd_version: date object specifying release date EBD version auk version designed work . taxonomy_version: year taxonomy built version auk, .e. one stored ebird_taxonomy.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Versions of auk, the EBD, and the eBird taxonomy — auk_version","text":"","code":"auk_version() #> $auk_version #> [1] \"auk 0.7.0\" #>  #> $ebd_version #> [1] \"2023-10-25\" #>  #> $taxonomy_version #> [1] 2023 #>"},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the eBird data to a set of years — auk_year","title":"Filter the eBird data to a set of years — auk_year","text":"Define filter eBird Basic Dataset (EBD) based set years. function defines filter , filters defined, auk_filter() used call AWK perform filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the eBird data to a set of years — auk_year","text":"","code":"auk_year(x, year, replace = FALSE)"},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the eBird data to a set of years — auk_year","text":"x auk_ebd auk_sampling object; reference file created auk_ebd() auk_sampling(). year integer; years filter . replace logical; multiple calls auk_year() additive, unless replace = FALSE, case previous list years filter removed replaced current call.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the eBird data to a set of years — auk_year","text":"auk_ebd object.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the eBird data to a set of years — auk_year","text":"filtering range dates use auk_date(); however, sometimes goal extract data given year set years, case auk_year() simpler. addition, auk_year() can used get data discontiguous sets years (e.g. 2010 2012, 2011), possible auk_date(). Finally, auk_year() can used conjunction auk_date() extract data given range dates within set years (see example ). function can also work auk_sampling object user wishes filter sampling event data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the eBird data to a set of years — auk_year","text":"","code":"# years to filter to years <- c(2010, 2012) # set up filter system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_year(year = years) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: 2010, 2012 #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no    # alternatively, without pipes ebd <- auk_ebd(system.file(\"extdata/ebd-sample.txt\", package = \"auk\")) auk_year(ebd, years) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: 2010, 2012 #>   Date: all #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no  # filter to may and june of 2010 and 2012 system.file(\"extdata/ebd-sample.txt\", package = \"auk\") %>%   auk_ebd() %>%   auk_year(year = c(2010, 2012)) %>%    auk_date(date = c(\"*-05-01\", \"*-06-30\")) #> Input  #>   EBD: /usr/local/lib/R/site-library/auk/extdata/ebd-sample.txt  #>  #> Output  #>   Filters not executed #>  #> Filters  #>   Species: all #>   Countries: all #>   States: all #>   Counties: all #>   BCRs: all #>   Bounding box: full extent #>   Years: 2010, 2012 #>   Date: *-05-01 - *-06-30 #>   Start time: all #>   Last edited date: all #>   Protocol: all #>   Project code: all #>   Duration: all #>   Distance travelled: all #>   Records with breeding codes only: no #>   Exotic Codes: all #>   Complete checklists only: no"},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and zero-fill an eBird data file — auk_zerofill","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"Read eBird Basic Dataset (EBD) file, associated sampling event data file, produce zero-filled, presence-absence dataset. EBD contains bird sightings sampling event data set checklists, can combined infer absence data assuming species reported checklist count zero.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"","code":"auk_zerofill(x, ...)  # S3 method for data.frame auk_zerofill(   x,   sampling_events,   species,   taxonomy_version,   collapse = FALSE,   unique = TRUE,   rollup = TRUE,   drop_higher = TRUE,   complete = TRUE,   ... )  # S3 method for character auk_zerofill(   x,   sampling_events,   species,   taxonomy_version,   collapse = FALSE,   unique = TRUE,   rollup = TRUE,   drop_higher = TRUE,   complete = TRUE,   sep = \"\\t\",   ... )  # S3 method for auk_ebd auk_zerofill(   x,   species,   taxonomy_version,   collapse = FALSE,   unique = TRUE,   rollup = TRUE,   drop_higher = TRUE,   complete = TRUE,   sep = \"\\t\",   ... )  collapse_zerofill(x)"},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"x filename, data.frame eBird observations, auk_ebd object associated output files created auk_filter(). filename provided, must point EBD sampling_events argument must point sampling event data file. data.frame provided imported read_ebd(), ensure variables names set correctly, must passed auk_unique() ensure duplicate group checklists removed. ... additional arguments passed methods. sampling_events character data.frame; filename sampling event data data.frame data. data.frame provided imported read_sampling(), ensure variables names set correctly, must passed auk_unique() ensure duplicate group checklists removed. species character; species include zero-filled dataset, provided scientific English common names, mixture . names must match official eBird Taxomony (ebird_taxonomy). include species, leave argument blank. taxonomy_version integer; version (.e. year) taxonomy. cases, left empty use version taxonomy included package. See get_ebird_taxonomy(). collapse logical; whether call collapse_zerofill() return data frame rather auk_zerofill object. unique logical; auk_unique() run input data already. rollup logical; auk_rollup() run input data already. drop_higher logical; whether remove taxa species rollup process, e.g. \"spuhs\" like \"duck sp.\". See auk_rollup(). complete logical; TRUE (default) checklists required complete prior zero-filling. sep character; single character used separate fields within row.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"default, auk_zerofill object, data frame collapse = TRUE.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"auk_zerofill() generates auk_zerofill object consisting list elements observations sampling_events. observations data frame giving counts binary presence/absence data species. sampling_events data frame checklist level information. two data frames can connected via checklist_id field. format efficient storage since checklist columns duplicated species, however, working data often requires joining two data frames together. return data frame, set collapse = TRUE. Alternatively, zerofill_collapse() generates data frame auk_zerofill object, joining two data frames together produce single data frame row provides checklist species information sighting. list species checked eBird taxonomy validity. taxonomy updated year August. auk package includes copy eBird taxonomy, current time release; however, EBD auk versions aligned, may need explicitly specify version taxonomy use, case eBird API queried get correct version taxonomy.","code":""},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"auk_zerofill(data.frame): EBD data frame. auk_zerofill(character): Filename EBD. auk_zerofill(auk_ebd): auk_ebd object output auk_filter(). Must sampling event data file set original call auk_ebd().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/auk_zerofill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and zero-fill an eBird data file — auk_zerofill","text":"","code":"# read and zero-fill the ebd data f_ebd <- system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") f_smpl <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") auk_zerofill(x = f_ebd, sampling_events = f_smpl) #> Zero-filled EBD: 663 unique checklists, for 3 species.  # use the species argument to only include a subset of species auk_zerofill(x = f_ebd, sampling_events = f_smpl,              species = \"Collared Kingfisher\") #> Zero-filled EBD: 663 unique checklists, for 1 species.  # to return a data frame use collapse = TRUE ebd_df <- auk_zerofill(x = f_ebd, sampling_events = f_smpl, collapse = TRUE)"},{"path":"https://docs.ropensci.org/auk/reference/bcr_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"BCR Codes — bcr_codes","title":"BCR Codes — bcr_codes","text":"data frame Bird Conservation Region (BCR) codes. BCRs ecologically distinct regions North America similar bird communities, habitats, resource management issues. codes required filter BCR using auk_bcr().","code":""},{"path":"https://docs.ropensci.org/auk/reference/bcr_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCR Codes — bcr_codes","text":"","code":"bcr_codes"},{"path":"https://docs.ropensci.org/auk/reference/bcr_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BCR Codes — bcr_codes","text":"data frame two variables 66 rows: bcr_code: integer code 1 66. bcr_name: name BCR.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/ebird_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup species in eBird taxonomy — ebird_species","title":"Lookup species in eBird taxonomy — ebird_species","text":"Given list common scientific names, check appear official eBird taxonomy convert scientific names, common names, species codes. Un-matched species returned NA.","code":""},{"path":"https://docs.ropensci.org/auk/reference/ebird_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup species in eBird taxonomy — ebird_species","text":"","code":"ebird_species(   x,   type = c(\"scientific\", \"common\", \"code\", \"all\"),   taxonomy_version )"},{"path":"https://docs.ropensci.org/auk/reference/ebird_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup species in eBird taxonomy — ebird_species","text":"x character; species look , provided scientific English common names, mixture . Case insensitive. type character; whether return scientific names (scientific), English common names (common), 6-letter eBird species codes (code). Alternatively, use return data frame taxonomy information. taxonomy_version integer; version (.e. year) taxonomy. Leave empty use version taxonomy included package. See get_ebird_taxonomy().","code":""},{"path":"https://docs.ropensci.org/auk/reference/ebird_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup species in eBird taxonomy — ebird_species","text":"Character vector species identified scientific name, common name, species code. type = \"\" data frame taxonomy requested species returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/ebird_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup species in eBird taxonomy — ebird_species","text":"","code":"# mix common and scientific names, case-insensitive species <- c(\"Blackburnian Warbler\", \"Poecile atricapillus\",              \"american dipper\", \"Caribou\") # note that species not in the ebird taxonomy return NA ebird_species(species) #> [1] \"Setophaga fusca\"      \"Poecile atricapillus\" \"Cinclus mexicanus\"    #> [4] NA                      # use taxonomy_version to query older taxonomy versions if (FALSE) { ebird_species(\"Cordillera Azul Antbird\") ebird_species(\"Cordillera Azul Antbird\", taxonomy_version = 2017) }"},{"path":"https://docs.ropensci.org/auk/reference/ebird_states.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird States — ebird_states","title":"eBird States — ebird_states","text":"data frame state codes used eBird. codes 4 6 characters, consisting two parts, 2-letter ISO country code 1-3 character state code, separated dash. example, \"US-NY\" corresponds New York State United States. state codes required filter state using auk_state().","code":""},{"path":"https://docs.ropensci.org/auk/reference/ebird_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird States — ebird_states","text":"","code":"ebird_states"},{"path":"https://docs.ropensci.org/auk/reference/ebird_states.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eBird States — ebird_states","text":"data frame four variables 3,145 rows: country: short form English country name. country_code: 2-letter ISO country code. state: state name. state_code: 4 6 character state code.","code":""},{"path":"https://docs.ropensci.org/auk/reference/ebird_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"eBird States — ebird_states","text":"Note countries broken states eBird therefore appear data frame.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/ebird_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Taxonomy — ebird_taxonomy","title":"eBird Taxonomy — ebird_taxonomy","text":"simplified version taxonomy used eBird. Includes proper species well various categories spuh (e.g. duck sp.) slash (e.g. American Black Duck/Mallard). taxonomy based Clements Checklist, updated annually, typically late summer. Non-ASCII characters (e.g. accents) converted ASCII equivalents data frame.","code":""},{"path":"https://docs.ropensci.org/auk/reference/ebird_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Taxonomy — ebird_taxonomy","text":"","code":"ebird_taxonomy"},{"path":"https://docs.ropensci.org/auk/reference/ebird_taxonomy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eBird Taxonomy — ebird_taxonomy","text":"data frame eight variables 16,248 rows: scientific_name: scientific name. common_name: common name, defaults English, different languages can selected using locale parameter. species_code: unique alphanumeric code identifying species. category: whether entry species another field-identifiable taxon, spuh, slash, hybrid, etc. taxon_order: numeric value used sort rows taxonomic order. order: scientific name order species belongs . family: scientific name family species belongs . report_as: taxa can resolved true species (.e. species, subspecies, recognizable forms), field links corresponding species code. taxa resolved, field NA. details, see https://support.ebird.org/support/solutions/articles/48000837816--ebird-taxonomy","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"Hierarchical modeling abundance occurrence requires repeat visits sites estimate detectability. visits within period closure, .e. population can assumed closed. eBird data, many data sources, explicitly follow protocol; however, subsets data can extracted produce data suitable hierarchical modeling. function extracts subset observation data desired number repeat visits within period closure.","code":""},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"","code":"filter_repeat_visits(   x,   min_obs = 2L,   max_obs = 10L,   annual_closure = TRUE,   n_days = NULL,   date_var = \"observation_date\",   site_vars = c(\"locality_id\", \"observer_id\"),   ll_digits = 6L )"},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"x data.frame; observation data, e.g. data eBird Basic Dataset (EBD) zero-filled auk_zerofill(). function also work auk_zerofill object, case converted data frame collapse_zerofill(). Note data must single species. min_obs integer; minimum number observations required site. max_obs integer; maximum number observations allowed site. annual_closure logical; whether entire year treated period closure (default). can useful, example, data subset period closure prior calling filter_repeat_visits(). n_days integer; number days defining temporal length closure. annual_closure = TRUE closure periods split year boundaries. annual_closure = FALSE closure periods ignore year boundaries. date_var character; column name variable x containing date. column either Date format convertible Date format .Date(). site_vars character; names one columns x define site, typically location (e.g. latitude/longitude) observer ID. ll_digits integer; number digits round latitude longitude . latitude /longitude used site_vars, usually best round prior identifying sites, otherwise locations slightly offset (e.g. centimeters) treated different. argument can also used group sites together close identical. Note 1 degree latitude approximately 100 km, default value 6 ll_digits equivalent 10 cm.","code":""},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"data.frame filtered retain observations sites allowed number observations within period closure. results sorted sites together chronological order. following variables added data frame: site: unique identifier \"site\" corresponding variables site_vars closure_id concatenated together underscore separators. closure_id: unique ID closure period. annual_closure =   TRUE ID include year. n_days used index given number blocks n_days days since earliest observation included. Note case, may gaps IDs. n_observations: number observations site filtering.","code":""},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"addition specifying minimum maximum number observations per site, users must specify variables dataset define \"site\". typically combination IDs defining geographic site unique observer (repeat visits meant conducted observer). Finally, closure period must defined, period within population focal species can reasonably assumed closed. can done using combination n_days annual_closure arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/filter_repeat_visits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter observations to repeat visits for hierarchical modeling — filter_repeat_visits","text":"","code":"# read and zero-fill the ebd data f_ebd <- system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") f_smpl <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") # data must be for a single species ebd_zf <- auk_zerofill(x = f_ebd, sampling_events = f_smpl,                        species = \"Collared Kingfisher\",                        collapse = TRUE) filter_repeat_visits(ebd_zf, n_days = 30) #> # A tibble: 251 × 41 #>    site          closure_id n_observations checklist_id last_edited_date country #>    <chr>         <chr>               <int> <chr>        <chr>            <chr>   #>  1 L1055540_obs… 2012-2                  2 S49291608    2023-01-31 19:3… Singap… #>  2 L1055540_obs… 2012-2                  2 S49291611    2022-03-12 04:3… Singap… #>  3 L1361109_obs… 2012-0                 10 S9612576     2021-08-17 17:4… Singap… #>  4 L1361109_obs… 2012-0                 10 S9635686     2022-03-12 04:3… Singap… #>  5 L1361109_obs… 2012-0                 10 S9640246     2012-03-20 03:2… Singap… #>  6 L1361109_obs… 2012-0                 10 S9652466     2012-03-20 03:2… Singap… #>  7 L1361109_obs… 2012-0                 10 S9652476     2022-03-12 04:3… Singap… #>  8 L1361109_obs… 2012-0                 10 S9664006     2022-03-12 04:3… Singap… #>  9 L1361109_obs… 2012-0                 10 S9671189     2021-04-02 03:4… Singap… #> 10 L1361109_obs… 2012-0                 10 S9672138     2022-03-12 04:3… Singap… #> # ℹ 241 more rows #> # ℹ 35 more variables: country_code <chr>, state <chr>, state_code <chr>, #> #   county <chr>, county_code <chr>, iba_code <chr>, bcr_code <int>, #> #   usfws_code <chr>, atlas_block <chr>, locality <chr>, locality_id <chr>, #> #   locality_type <chr>, latitude <dbl>, longitude <dbl>, #> #   observation_date <date>, time_observations_started <chr>, #> #   observer_id <chr>, sampling_event_identifier <chr>, protocol_type <chr>, …"},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":null,"dir":"Reference","previous_headings":"","what":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"Prepare data frame species observations ingestion package unmarked hierarchical modeling abundance occurrence. function unmarked::formatWide() takes data frame converts one several unmarked objects, can used modeling. function converts data format row observation (e.g. eBird Basic Dataset) esoteric format required unmarked::formatWide() row site.","code":""},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"","code":"format_unmarked_occu(   x,   site_id = \"site\",   response = \"species_observed\",   site_covs,   obs_covs )"},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"x data.frame; observation data, e.g. eBird Basic Dataset (EBD), single species, filtered repeat visits filter_repeat_visits(). site_id character; unique idenitifer \"site\", typically identifying observations unique location observer within period temporal closure. Data output filter_repeat_visits() .site_id variable meets requirements. response character; variable act response modeling efforts, typically binary variable indicating presence absence count individuals seen. site_covs character; variables act site-level covariates, .e. covariates vary site level, example, latitude/longitude habitat predictors. parameter missing, assumed variable observation-level covariate (obs_covs) site_id, site-level covariate. obs_covs character; variables act observation-level covariates, .e. covariates vary within sites, level observations, example, time length observation.","code":""},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"data frame can processed unmarked::formatWide(). row correspond unqiue site , assuming maximum N observations per site, columns follows: unique site identifier, named \"site\". N response columns, one observation, named \"y.1\", ..., \"y.N\". Columns site-level covariates. Groups N columns observation-level covariates, one column per covariate per observation, names \"covariate_name.1\", ..., \"covariate_name.N\".","code":""},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"Hierarchical modeling requires repeat observations \"site\" estimate detectability. \"site\" typically defined geographic location visited observer within period temporal closure. define sites filter observations correspond repeat visits, users use filter_repeat_visits(), pass output function. format_unmarked_occu() designed prepare data converted unmarkedFrameOccu object occupancy modeling unmarked::occu(); however, can also used prepare data conversion unmarkedFramePCount object abundance modeling unmarked::pcount().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/format_unmarked_occu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format EBD data for occupancy modeling with unmarked — format_unmarked_occu","text":"","code":"# read and zero-fill the ebd data f_ebd <- system.file(\"extdata/zerofill-ex_ebd.txt\", package = \"auk\") f_smpl <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") # data must be for a single species ebd_zf <- auk_zerofill(x = f_ebd, sampling_events = f_smpl,                        species = \"Collared Kingfisher\",                        collapse = TRUE) occ <- filter_repeat_visits(ebd_zf, n_days = 30) # format for unmarked # typically one would join in habitat covariates prior to this step occ_wide <- format_unmarked_occu(occ,                                  response = \"species_observed\",                                  site_covs = c(\"latitude\", \"longitude\"),                                  obs_covs = c(\"effort_distance_km\",                                                \"duration_minutes\")) # create an unmarked object if (requireNamespace(\"unmarked\", quietly = TRUE)) {   occ_um <- unmarked::formatWide(occ_wide, type = \"unmarkedFrameOccu\")   unmarked::summary(occ_um) } #> unmarkedFrame Object #>  #> 66 sites #> Maximum number of observations per site: 10  #> Mean number of observations per site: 3.8  #> Sites with at least one detection: 37  #>  #> Tabulation of y observations: #> FALSE  TRUE  <NA>  #>   173    78   409  #>  #> Site-level covariates: #>     latitude       longitude     #>  Min.   :1.206   Min.   :103.7   #>  1st Qu.:1.303   1st Qu.:103.7   #>  Median :1.337   Median :103.8   #>  Mean   :1.334   Mean   :103.8   #>  3rd Qu.:1.354   3rd Qu.:103.9   #>  Max.   :1.446   Max.   :104.0   #>  #> Observation-level covariates: #>  effort_distance_km duration_minutes #>  Min.   : 0.100     Min.   :  1.00   #>  1st Qu.: 0.200     1st Qu.: 15.00   #>  Median : 1.000     Median : 30.00   #>  Mean   : 1.434     Mean   : 62.97   #>  3rd Qu.: 2.000     3rd Qu.: 75.00   #>  Max.   :10.000     Max.   :480.00   #>  NA's   :584        NA's   :584       # this function can also be used for abundance modeling abd <- ebd_zf %>%    # convert count to integer, drop records with no count   dplyr::mutate(observation_count = as.integer(observation_count)) %>%    dplyr::filter(!is.na(observation_count)) %>%    # filter to repeated visits   filter_repeat_visits(n_days = 30) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `observation_count = as.integer(observation_count)`. #> Caused by warning: #> ! NAs introduced by coercion # prepare for conversion to unmarkedFramePCount object abd_wide <- format_unmarked_occu(abd,                                  response = \"observation_count\",                                  site_covs = c(\"latitude\", \"longitude\"),                                  obs_covs = c(\"effort_distance_km\",                                                \"duration_minutes\")) # create an unmarked object if (requireNamespace(\"unmarked\", quietly = TRUE)) {   abd_um <- unmarked::formatWide(abd_wide, type = \"unmarkedFrameOccu\")   unmarked::summary(abd_um) } #> unmarkedFrame Object #>  #> 65 sites #> Maximum number of observations per site: 10  #> Mean number of observations per site: 3.83  #> Sites with at least one detection: 36  #>  #> Tabulation of y observations: #>    0    1    2    3    4    5    6    7    9   10 <NA>  #>  174   33   18    7    5    6    2    1    1    2  401  #>  #> Site-level covariates: #>     latitude       longitude     #>  Min.   :1.206   Min.   :103.7   #>  1st Qu.:1.302   1st Qu.:103.7   #>  Median :1.337   Median :103.8   #>  Mean   :1.333   Mean   :103.8   #>  3rd Qu.:1.352   3rd Qu.:103.9   #>  Max.   :1.446   Max.   :104.0   #>  #> Observation-level covariates: #>  effort_distance_km duration_minutes #>  Min.   : 0.100     Min.   :  1.00   #>  1st Qu.: 0.200     1st Qu.: 15.00   #>  Median : 1.000     Median : 30.00   #>  Mean   : 1.475     Mean   : 64.75   #>  3rd Qu.: 2.000     3rd Qu.: 75.00   #>  Max.   :10.000     Max.   :480.00   #>  NA's   :573        NA's   :573"},{"path":"https://docs.ropensci.org/auk/reference/get_ebird_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","title":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","text":"Get taxonomy used eBird via eBird API.","code":""},{"path":"https://docs.ropensci.org/auk/reference/get_ebird_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","text":"","code":"get_ebird_taxonomy(version, locale)"},{"path":"https://docs.ropensci.org/auk/reference/get_ebird_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","text":"version integer; version (.e. year) taxonomy. eBird taxonomy updated year August. Leave parameter blank get current taxonomy. locale character; locale common names, defaults English.","code":""},{"path":"https://docs.ropensci.org/auk/reference/get_ebird_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","text":"data frame species eBird taxonomy, consisting following columns: scientific_name: scientific name. common_name: common name, defaults English, different languages can selected using locale parameter. species_code: unique alphanumeric code identifying species. category: whether entry species another field-identifiable taxon, spuh, slash, hybrid, etc. taxon_order: numeric value used sort rows taxonomic order. order: scientific name order species belongs . family: scientific name family species belongs . report_as: taxa can resolved true species (.e. species, subspecies, recognizable forms), field links corresponding species code. taxa resolved, field NA.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/get_ebird_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get eBird taxonomy via the eBird API — get_ebird_taxonomy","text":"","code":"if (FALSE) { get_ebird_taxonomy() }"},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an EBD file — read_ebd","title":"Read an EBD file — read_ebd","text":"Read eBird Basic Dataset file using readr::read_delim(). read_ebd() reads EBD , read_sampling()` reads sampling event data file.","code":""},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an EBD file — read_ebd","text":"","code":"read_ebd(x, sep = \"\\t\", unique = TRUE, rollup = TRUE)  # S3 method for character read_ebd(x, sep = \"\\t\", unique = TRUE, rollup = TRUE)  # S3 method for auk_ebd read_ebd(x, sep = \"\\t\", unique = TRUE, rollup = TRUE)  read_sampling(x, sep = \"\\t\", unique = TRUE)  # S3 method for character read_sampling(x, sep = \"\\t\", unique = TRUE)  # S3 method for auk_ebd read_sampling(x, sep = \"\\t\", unique = TRUE)  # S3 method for auk_sampling read_sampling(x, sep = \"\\t\", unique = TRUE)"},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an EBD file — read_ebd","text":"x filename auk_ebd object associated output files created auk_filter(). sep character; single character used separate fields within row. unique logical; duplicate grouped checklists removed. unique = TRUE, auk_unique() called EBD returning. rollup logical; taxonomic rollup species level applied. rollup = TRUE, auk_rollup() called EBD returning. Note process can time consuming large files, try turning rollup reading taking long.","code":""},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an EBD file — read_ebd","text":"data frame EBD observations. additional column, checklist_id, added output files unique = TRUE, uniquely identifies checklist observation came. field equal sampling_event_identifier non-group checklists, group_identifier group checklists.","code":""},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an EBD file — read_ebd","text":"functions performs following processing steps: Data types columns manually set based column names used February 2017 EBD. variables added names changed later releases, new variables data types inferred import function used. Variables names converted snake_case. Duplicate observations resulting group checklists removed using auk_unique(), unless unique = FALSE.","code":""},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Read an EBD file — read_ebd","text":"read_ebd(character): Filename EBD. read_ebd(auk_ebd): auk_ebd object output auk_filter()","code":""},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read an EBD file — read_ebd","text":"read_sampling(character): Filename sampling event data file read_sampling(auk_ebd): auk_ebd object output auk_filter(). Must sampling event data file set original call auk_ebd(). read_sampling(auk_sampling): auk_sampling object output auk_filter().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/reference/read_ebd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an EBD file — read_ebd","text":"","code":"f <- system.file(\"extdata/ebd-sample.txt\", package = \"auk\") read_ebd(f) #> # A tibble: 398 × 48 #>    checklist_id global_unique_identi…¹ last_edited_date taxonomic_order category #>    <chr>        <chr>                  <chr>                      <dbl> <chr>    #>  1 G1131664     URN:CornellLabOfOrnit… 2021-03-29 21:2…           20724 species  #>  2 G1131665     URN:CornellLabOfOrnit… 2020-02-01 20:3…           20724 species  #>  3 G1158137     URN:CornellLabOfOrnit… 2018-08-03 18:0…           20674 species  #>  4 G1158138     URN:CornellLabOfOrnit… 2015-02-23 20:1…           20674 species  #>  5 G1277458     URN:CornellLabOfOrnit… 2021-04-16 01:4…           20724 species  #>  6 G1282142     URN:CornellLabOfOrnit… 2022-02-08 17:4…           20724 species  #>  7 G1362943     URN:CornellLabOfOrnit… 2018-12-25 18:4…           20786 species  #>  8 G144144      URN:CornellLabOfOrnit… 2019-04-10 10:2…           20674 species  #>  9 G151064      URN:CornellLabOfOrnit… 2022-01-30 08:2…           20724 species  #> 10 G161795      URN:CornellLabOfOrnit… 2021-04-16 06:0…           20724 species  #> # ℹ 388 more rows #> # ℹ abbreviated name: ¹​global_unique_identifier #> # ℹ 43 more variables: taxon_concept_id <chr>, common_name <chr>, #> #   scientific_name <chr>, exotic_code <chr>, observation_count <chr>, #> #   breeding_code <chr>, breeding_category <chr>, behavior_code <chr>, #> #   age_sex <chr>, country <chr>, country_code <chr>, state <chr>, #> #   state_code <chr>, county <chr>, county_code <chr>, iba_code <chr>, … # read a sampling event data file x <- system.file(\"extdata/zerofill-ex_sampling.txt\", package = \"auk\") %>%   read_sampling()"},{"path":"https://docs.ropensci.org/auk/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://docs.ropensci.org/auk/reference/valid_protocols.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Protocols — valid_protocols","title":"Valid Protocols — valid_protocols","text":"vector valid protocol names, e.g. \"Traveling\", \"Stationary\", etc.","code":""},{"path":"https://docs.ropensci.org/auk/reference/valid_protocols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Protocols — valid_protocols","text":"","code":"valid_protocols"},{"path":"https://docs.ropensci.org/auk/reference/valid_protocols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valid Protocols — valid_protocols","text":"vector 42 elements.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-070","dir":"Changelog","previous_headings":"","what":"auk 0.7.0","title":"auk 0.7.0","text":"CRAN release: 2023-11-14 update 2023 eBird taxonomy need restart setting AWK EBD paths retain breeding codes auk_zerofill() changes conform deprecation .data$ tidyselect expressions changes package-level documentation roxygen2 removed non-ASCII characters datasets","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-060","dir":"Changelog","previous_headings":"","what":"auk 0.6.0","title":"auk 0.6.0","text":"CRAN release: 2022-10-29 update 2022 eBird taxonomy","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-052","dir":"Changelog","previous_headings":"","what":"auk 0.5.2","title":"auk 0.5.2","text":"added extinct column taxonomy","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-051","dir":"Changelog","previous_headings":"","what":"auk 0.5.1","title":"auk 0.5.1","text":"CRAN release: 2021-10-27 drop data.table dependency, longer needed readr speed improvements fix bug arising ‘breeding bird atlas code’ renamed ‘breeding code’ (issue #58)","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-050","dir":"Changelog","previous_headings":"","what":"auk 0.5.0","title":"auk 0.5.0","text":"CRAN release: 2021-09-16 update align 2021 eBird taxonomy","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-044","dir":"Changelog","previous_headings":"","what":"auk 0.4.4","title":"auk 0.4.4","text":"CRAN release: 2021-07-21 updates align readr 2.0","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-043","dir":"Changelog","previous_headings":"","what":"auk 0.4.3","title":"auk 0.4.3","text":"CRAN release: 2020-11-23 get_ebird_taxonomy() now fails gracefully eBird API accessible, fixing CRAN check errors https://cran.r-project.org/web/checks/check_results_auk.html","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-042","dir":"Changelog","previous_headings":"","what":"auk 0.4.2","title":"auk 0.4.2","text":"CRAN release: 2020-10-19 new auk_county() filter new auk_year() filter Drop taxonomy warnings since taxonomy update year","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-041","dir":"Changelog","previous_headings":"","what":"auk 0.4.1","title":"auk 0.4.1","text":"CRAN release: 2020-04-03 Family common names now included eBird taxonomy auk_select() now requires certain columns kept Better handling file paths prefix argument auk_split() Fixed bug causing undescribed species dropped auk_rollup() Add ll_digits argument filter_repeat_visits() round lat/lng prior identifying sites Change default parameters filter_repeat_visits() auk_bbox() now takes sf/raster spatial objects grabs bbox ","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-040","dir":"Changelog","previous_headings":"","what":"auk 0.4.0","title":"auk 0.4.0","text":"CRAN release: 2019-09-23 Updated 2019 eBird taxonomy auk_observer() filter added tidyr::complete_() deprecated, stopped using","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-033","dir":"Changelog","previous_headings":"","what":"auk 0.3.3","title":"auk 0.3.3","text":"CRAN release: 2019-06-23 Dates can now wrap auk_date(), e.g. use date = c(\"*-12-01\", \"*-01-31\") records December January Fixed bug preventing dropping age/sex column Allow wider variety protocols auk_protocol() Addresing deprecated functions rlang Fixed bug causing auk_set_awk_path() fail","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-032","dir":"Changelog","previous_headings":"","what":"auk 0.3.2","title":"auk 0.3.2","text":"CRAN release: 2019-02-04 Work around bug system2() R versions: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17508 Adding filter PROALAS checklists auk_protocol()","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-031","dir":"Changelog","previous_headings":"","what":"auk 0.3.1","title":"auk 0.3.1","text":"CRAN release: 2018-12-07 rlang::UQ() rlang::UQS() deprecated, switching !! !!! auk_unique() now keeps track sampling event observer IDs comprise group checklist","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-030","dir":"Changelog","previous_headings":"","what":"auk 0.3.0","title":"auk 0.3.0","text":"CRAN release: 2018-10-04 Updated 2018 taxonomy; new function get_ebird_taxonomy() get taxonomy via eBird API Better handling taxonomy versions, many functions now take taxonomy_version argument use eBird API get taxonomy auk_getpath() renamed auk_get_awk_path(), added auk_set_awk_path() Added auk_set_ebd_path() auk_get_ebd_path() set get EBD_PATH environment variable. Now users need set just refer file name, rather specifying full path every time. Functions prepare data occupancy modeling: filter_repeat_visits() format_unmarked_occu() New auk_bcr() function extract data BCRs Added bcr_codes data frame look BCR names codes “Area” protocol added auk_protocol() filter. auk_extent() renamed auk_bbox(); auk_extent() deprecated redirects auk_bbox() auk_zerofill() now checks complete checklists gives option rollup auk_rollup() now gives option keeping higher taxa via drop_higher argument auk_clean() deprecated Fixed package load error EBD_PATH invalid Fixed bug reading files blank column using readr","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-022","dir":"Changelog","previous_headings":"","what":"auk 0.2.2","title":"auk 0.2.2","text":"CRAN release: 2018-07-23 Updated work EDB version 1.9 Modified tests general sample data ebird_species() now returns 6-letter species codes Fixed bug causing auk fail files downloaded via custom download form Fixed bug normalizePath() use Windows Fixed bug system2() Windows","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-021","dir":"Changelog","previous_headings":"","what":"auk 0.2.1","title":"auk 0.2.1","text":"CRAN release: 2018-03-28 Patch release fixing couple bugs Removed non-ASCII characters example files, closes issue #14 Fixed issue state filtering working, closes issue $16","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-020","dir":"Changelog","previous_headings":"","what":"auk 0.2.0","title":"auk 0.2.0","text":"CRAN release: 2018-03-20 New function, auk_split(), splits EBD multiple files species New object, auk_sampling, associated methods working sampling data New function, auk_select(), selecting subset columns auk_date() now allows filtering date ranges across years using wildcards, e.g. date = c(\"*-05-01\", \"*-06-30\") observations May June year New function, auk_state() filtering state Now using AWK arrays speed country species filtering; ~20% speed filtering many species/countries Allow selection subset columns filtering Remove free text columns auk_clean() decrease file size Updated work Feb 2018 version EBD Fixed broken dependency countrycode package","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-010","dir":"Changelog","previous_headings":"","what":"auk 0.1.0","title":"auk 0.1.0","text":"CRAN release: 2017-10-21 eBird taxonomy update August 2017 version, users download recent EBD ensure taxonomy sync new package Manually set AWK path environment variable AWK_PATH .Renviron file auk_distance, auk_breeding, auk_protocol, auk_project filters added Users can now specify subset columns return calling auk_filter using keep drop arguments Many changes suggested rOpenSci package peer review process, see https://github.com/ropensci/onboarding/issues/136 details New vignette added aid wanting contribute package development","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-002","dir":"Changelog","previous_headings":"","what":"auk 0.0.2","title":"auk 0.0.2","text":"CRAN release: 2017-07-05 Patch release converting ebird_taxonomy ASCII pass CRAN checks","code":""},{"path":"https://docs.ropensci.org/auk/news/index.html","id":"auk-001","dir":"Changelog","previous_headings":"","what":"auk 0.0.1","title":"auk 0.0.1","text":"CRAN release: 2017-07-05 First CRAN release","code":""}]
